{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*(_:_:)-b5dc",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*(_:_:)-53xcf",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*(_:_:)-44lgr",
                "title" : "static func * (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*(_:_:)-53xcf",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*(_:_:)-b5dc",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*(_:_:)-6b5t5",
                "title" : "static func * (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*=(_:_:)-1w6iv",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*=(_:_:)-3tidt",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*=(_:_:)-8l5rb",
                "title" : "static func *= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*=(_:_:)-1w6iv",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*=(_:_:)-3tidt",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*=(_:_:)-9eehz",
                "title" : "static func *= (inout Self, Self)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+(_:_:)-4wjjr",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+(_:_:)-9ygmi",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+(_:_:)-22nkj",
                "title" : "static func + (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+(_:_:)-4wjjr",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+(_:_:)-9ygmi",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+(_:_:)-5wkzf",
                "title" : "static func + (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+=(_:_:)-1hnfr",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+=(_:_:)-1cwri",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+=(_:_:)-75nkk",
                "title" : "static func += (inout Self, Self)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+=(_:_:)-1cwri",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+=(_:_:)-1hnfr",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+=(_:_:)-fnm2",
                "title" : "static func += (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-(_:_:)-6a96v",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-(_:_:)-7p5xj",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-(_:_:)-1308t",
                "title" : "static func - (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-(_:_:)-7p5xj",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-(_:_:)-6a96v",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-(_:_:)-2q5if",
                "title" : "static func - (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-=(_:_:)-pept",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-=(_:_:)-100ot",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-=(_:_:)-49upm",
                "title" : "static func -= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-=(_:_:)-pept",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-=(_:_:)-100ot",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-=(_:_:)-jn00",
                "title" : "static func -= (inout Self, Self)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-99oep",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-2b670",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-26jfz",
                "title" : "static func \/ (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-99oep",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-2b670",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-4dop5",
                "title" : "static func \/ (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-6vqkl",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-6h1fg",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-14uup",
                "title" : "static func \/= (inout Self, Self)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-6vqkl",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-6h1fg",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-81hog",
                "title" : "static func \/= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-7su4o",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-557x1",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-1skxt",
                "title" : "static func % (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-557x1",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-7su4o",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-7h704",
                "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-1uu5b",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-2zw2k",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-2kjsu",
                "title" : "static func %= (inout Self, Self)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-2zw2k",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-1uu5b",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-9yvxp",
                "title" : "static func %= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/digit",
                "title" : "Digit",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(_:)-8j2y7",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(_:)-7ywgi",
                        "title" : "init?(String)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(_:)-9p8eg",
                "title" : "init?(String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(_:radix:)",
                "title" : "init?(some StringProtocol, radix: Int)",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(bit:)-7eh3j",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(bit:)-91tb7",
                "title" : "init(bit: Bool)",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(digit:)-9scf6",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(digit:)-2f5it",
                "title" : "init(digit: Self.Digit)",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(magnitude:)-ssg",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(magnitude:)-12adm",
                "title" : "init?(magnitude: Self.Magnitude)",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(sign:magnitude:)-lpxl",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(sign:magnitude:)-4otu9",
                "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(words:)",
                "title" : "init?(words: some RandomAccessCollection<UInt>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(words:issigned:)",
                "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/bitwidth",
                "title" : "var bitWidth: Int",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/description-5nbl3",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/description-2oong",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/iseven",
                "title" : "var isEven: Bool",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/islessthanzero-9grdv",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/islessthanzero-4qdio",
                "title" : "var isLessThanZero: Bool",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/ismorethanzero-28t4a",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/ismorethanzero-55vb1",
                "title" : "var isMoreThanZero: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/isodd",
                "title" : "var isOdd: Bool",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/ispowerof2-1eiyt",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/ispowerof2-1zodo",
                "title" : "var isPowerOf2: Bool",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/iszero-7i5p8",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/iszero-6lcoa",
                "title" : "var isZero: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/leadingzerobitcount",
                "title" : "var leadingZeroBitCount: Int",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/leastsignificantbit-4ir4c",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/leastsignificantbit-11664",
                "title" : "var leastSignificantBit: Bool",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/mostsignificantbit-7pyzp",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/mostsignificantbit-1v1ti",
                "title" : "var mostSignificantBit: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/nonzerobitcount",
                "title" : "var nonzeroBitCount: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/trailingzerobitcount",
                "title" : "var trailingZeroBitCount: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/compared(to:)-6jzcv",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/compared(to:)-14vgb",
                "title" : "func compared(to: Self.Digit) -> Int",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/compared(to:)-6jzcv",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/compared(to:)-an0k",
                "title" : "func compared(to: Self) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/description(radix:uppercase:)",
                "title" : "func description(radix: Int, uppercase: Bool) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/dividereportingoverflow(by:)-7p397",
                "title" : "func divideReportingOverflow(by: Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/dividereportingoverflow(by:)-9owka",
                "title" : "func divideReportingOverflow(by: Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/dividedreportingoverflow(by:)-53rf6",
                "title" : "func dividedReportingOverflow(by: Self.Digit) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/dividedreportingoverflow(by:)-9cvzj",
                "title" : "func dividedReportingOverflow(by: Self) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formonescomplement()",
                "title" : "func formOnesComplement()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formremainderreportingoverflow(dividingby:)-4h8o0",
                "title" : "func formRemainderReportingOverflow(dividingBy: Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formremainderreportingoverflow(dividingby:)-4ov9t",
                "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formtwoscomplement()-5ibo9",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formtwoscomplement()-5ojn1",
                "title" : "func formTwosComplement()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formtwoscomplementreportingoverflow()",
                "title" : "func formTwosComplementReportingOverflow() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formtwoscomplementsubsequence(_:)",
                "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/onescomplement()",
                "title" : "func onesComplement() -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-2rocc",
                        "title" : "func quotientAndRemainder(dividingBy: Self.Digit) -> QR<Self, Self.Digit>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-3ep4z",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-4qhwl",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-4m3g0",
                "title" : "func quotientAndRemainder(dividingBy: Self.Digit) -> QR<Self, Self.Digit>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-4qhwl",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-2rocc",
                        "title" : "func quotientAndRemainder(dividingBy: Self.Digit) -> QR<Self, Self.Digit>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-3ep4z",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-75xeo",
                "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainderreportingoverflow(dividingby:)-5rdpc",
                "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self.Digit) -> PVO<QR<Self, Self.Digit>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainderreportingoverflow(dividingby:)-8vjq7",
                "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/remainderreportingoverflow(dividingby:)-3q18l",
                "title" : "func remainderReportingOverflow(dividingBy: Self.Digit) -> PVO<Self.Digit>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/remainderreportingoverflow(dividingby:)-45jzw",
                "title" : "func remainderReportingOverflow(dividingBy: Self) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/signum()",
                "title" : "func signum() -> Int",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/twoscomplement()-82fzz",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/twoscomplement()-dy1a",
                "title" : "func twosComplement() -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/twoscomplementreportingoverflow()",
                "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/twoscomplementsubsequence(_:)",
                "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/one-89lpl",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/one-2i8u1",
                "title" : "static var one: Self",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/zero",
                "title" : "static var zero: Self",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkbinaryinteger",
            "title" : "NBKBinaryInteger",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbitpatternconvertible\/bitpattern-swift.associatedtype",
                "title" : "BitPattern",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbitpatternconvertible\/init(bitpattern:)-y5zj",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbitpatternconvertible\/init(bitpattern:)-9jl80",
                "title" : "init(bitPattern: Self.BitPattern)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbitpatternconvertible\/bitpattern-swift.property",
                "title" : "var bitPattern: Self.BitPattern",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkbitpatternconvertible",
            "title" : "NBKBitPatternConvertible",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/dividereportingoverflow(by:)",
                "title" : "func divideReportingOverflow(by: Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/formremainderreportingoverflow(dividingby:)",
                "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/quotientandremainderreportingoverflow(dividingby:)",
                "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/signum()",
                "title" : "func signum() -> Int",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/init(words:)",
                    "title" : "init?(words: some RandomAccessCollection<UInt>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/init(words:issigned:)",
                    "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/description(radix:uppercase:)",
                    "title" : "func description(radix: Int, uppercase: Bool) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/formonescomplement()",
                    "title" : "func formOnesComplement()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/formtwoscomplementreportingoverflow()",
                    "title" : "func formTwosComplementReportingOverflow() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/formtwoscomplementsubsequence(_:)",
                    "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/onescomplement()",
                    "title" : "func onesComplement() -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/twoscomplementreportingoverflow()",
                    "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/twoscomplementsubsequence(_:)",
                    "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/nbkbinaryinteger-implementations",
                "title" : "NBKBinaryInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/init(bitpattern:)",
                    "title" : "init(bitPattern: Self.BitPattern)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/bitpattern",
                    "title" : "var bitPattern: Self.BitPattern",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/nbkbitpatternconvertible-implementations",
                "title" : "NBKBitPatternConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkcoreinteger",
            "title" : "NBKCoreInteger",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&*(_:_:)-33382",
                "title" : "static func &* (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&*(_:_:)-7nrni",
                "title" : "static func &* (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&*=(_:_:)-5ncdy",
                "title" : "static func &*= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&*=(_:_:)-71zes",
                "title" : "static func &*= (inout Self, Self)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&+(_:_:)-620iz",
                "title" : "static func &+ (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&+(_:_:)-75xwb",
                "title" : "static func &+ (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&+=(_:_:)-25vws",
                "title" : "static func &+= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&+=(_:_:)-9ft2m",
                "title" : "static func &+= (inout Self, Self)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&-(_:_:)-6ewyg",
                "title" : "static func &- (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&-(_:_:)-8r1yl",
                "title" : "static func &- (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&-=(_:_:)-2fxk3",
                "title" : "static func &-= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&-=(_:_:)-9apxb",
                "title" : "static func &-= (inout Self, Self)",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/init(repeating:)-45js7",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/init(repeating:)-9paxb",
                "title" : "init(repeating: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/addreportingoverflow(_:)-7dsb2",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/addreportingoverflow(_:)-3sbvr",
                "title" : "func addReportingOverflow(Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/addreportingoverflow(_:)-7dsb2",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/addreportingoverflow(_:)-7k5cn",
                "title" : "func addReportingOverflow(Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/addingreportingoverflow(_:)-6li79",
                "title" : "func addingReportingOverflow(Self.Digit) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/addingreportingoverflow(_:)-9h7a0",
                "title" : "func addingReportingOverflow(Self) -> PVO<Self>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftleft(by:)-4exes",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftleft(by:)-4ou5",
                "title" : "func bitShiftLeft(by: Int)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftright(by:)-3opuq",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftright(by:)-32oqx",
                "title" : "func bitShiftRight(by: Int)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftedleft(by:)-8vt8n",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftedleft(by:)-8lzzt",
                "title" : "func bitShiftedLeft(by: Int) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftedright(by:)-9ohyf",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftedright(by:)-9ykh8",
                "title" : "func bitShiftedRight(by: Int) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/dividingfullwidth(_:)",
                "title" : "func dividingFullWidth(HL<Self, Self.Magnitude>) -> QR<Self, Self>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/dividingfullwidthreportingoverflow(_:)-2geg8",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/dividingfullwidthreportingoverflow(_:)-6na1u",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/dividingfullwidthreportingoverflow(_:)-7z73x",
                "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multipliedfullwidth(by:)-60fsq",
                "title" : "func multipliedFullWidth(by: Self) -> HL<Self, Self.Magnitude>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multipliedfullwidth(by:)-6n7wq",
                "title" : "func multipliedFullWidth(by: Self.Digit) -> HL<Self.Digit, Self.Magnitude>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multipliedreportingoverflow(by:)-2h3ls",
                "title" : "func multipliedReportingOverflow(by: Self.Digit) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multipliedreportingoverflow(by:)-3769p",
                "title" : "func multipliedReportingOverflow(by: Self) -> PVO<Self>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyfullwidth(by:)-50pop",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyfullwidth(by:)-71cnq",
                "title" : "func multiplyFullWidth(by: Self.Digit) -> Self.Digit",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyfullwidth(by:)-50pop",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyfullwidth(by:)-7kwsk",
                "title" : "func multiplyFullWidth(by: Self) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyreportingoverflow(by:)-68ks4",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyreportingoverflow(by:)-6my0w",
                "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyreportingoverflow(by:)-68ks4",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyreportingoverflow(by:)-ugt4",
                "title" : "func multiplyReportingOverflow(by: Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/negatereportingoverflow()",
                "title" : "func negateReportingOverflow() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/negatedreportingoverflow()",
                "title" : "func negatedReportingOverflow() -> PVO<Self>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/subtractreportingoverflow(_:)-4f335",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/subtractreportingoverflow(_:)-46k05",
                "title" : "func subtractReportingOverflow(Self) -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/subtractreportingoverflow(_:)-4f335",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/subtractreportingoverflow(_:)-526y0",
                "title" : "func subtractReportingOverflow(Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/subtractingreportingoverflow(_:)-81e6v",
                "title" : "func subtractingReportingOverflow(Self.Digit) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/subtractingreportingoverflow(_:)-8371o",
                "title" : "func subtractingReportingOverflow(Self) -> PVO<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkfixedwidthinteger",
            "title" : "NBKFixedWidthInteger",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbksignedinteger\/-(_:)-1kbja",
                        "title" : "static func - (Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbksignedinteger\/-(_:)-6piqk",
                "title" : "static func - (Self) -> Self",
                "type" : "op"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbksignedinteger\/negate()-7vb46",
                        "title" : "func negate()",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbksignedinteger\/negate()-8cb78",
                "title" : "func negate()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbksignedinteger\/negatereportingoverflow()",
                "title" : "func negateReportingOverflow() -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbksignedinteger\/negated()-4udpi",
                        "title" : "func negated() -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbksignedinteger\/negated()-1j48c",
                "title" : "func negated() -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbksignedinteger\/negatedreportingoverflow()",
                "title" : "func negatedReportingOverflow() -> PVO<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/numberick\/nbksignedinteger",
            "title" : "NBKSignedInteger",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkunsignedinteger\/subtractreportingoverflow(_:)-467am",
                "title" : "func subtractReportingOverflow(Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkunsignedinteger\/subtractreportingoverflow(_:)-8hhop",
                "title" : "func subtractReportingOverflow(Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkunsignedinteger\/subtractingreportingoverflow(_:)-2q20i",
                "title" : "func subtractingReportingOverflow(Self) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkunsignedinteger\/subtractingreportingoverflow(_:)-7qeuq",
                "title" : "func subtractingReportingOverflow(Self.Digit) -> PVO<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkunsignedinteger",
            "title" : "NBKUnsignedInteger",
            "type" : "protocol"
          },
          {
            "title" : "Models",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkchunkedint\/init(_:issigned:count:as:)",
                "title" : "init(Base, isSigned: Bool, count: Int?, as: Element.Type)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkchunkedint\/base-swift.property",
                "title" : "let base: Base",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkchunkedint\/count",
                "title" : "let count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkchunkedint\/sign",
                "title" : "let sign: Element",
                "type" : "property"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkchunkedint\/base-swift.typealias",
                "title" : "NBKChunkedInt.Base",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/last",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/difference(from:)",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/firstrange(of:)-6v90m",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/formindex(before:)",
                    "title" : "func formIndex(before: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/joined(separator:)-1dkon",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/lastindex(of:)",
                    "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkchunkedint\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/endindex",
                    "title" : "var endIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/startindex",
                    "title" : "var startIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/firstrange(of:)-43cid",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/formindex(after:)",
                    "title" : "func formIndex(after: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/map(_:)-6zluk",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkchunkedint\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/indices",
                    "title" : "var indices: Range<Int>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/distance(from:to:)",
                    "title" : "func distance(from: Int, to: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/index(_:offsetby:)",
                    "title" : "func index(Int, offsetBy: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/index(after:)",
                    "title" : "func index(after: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/index(before:)",
                    "title" : "func index(before: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/subscript(_:)",
                    "title" : "subscript(Int) -> Element",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkchunkedint\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/flatmap(_:)-2lz1o",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/flatmap(_:)-2v7d8",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/joined(separator:)-52j0b",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/joined(separator:)-8ofzp",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/map(_:)-3h7sm",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkchunkedint\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkchunkedint",
            "title" : "NBKChunkedInt",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-37f10",
                "title" : "static func &<< (NBKDoubleWidth<High>, some BinaryInteger) -> NBKDoubleWidth<High>",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-l69g",
                "title" : "static func &>> (NBKDoubleWidth<High>, some BinaryInteger) -> NBKDoubleWidth<High>",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(ascending:)",
                "title" : "init(ascending: LH<NBKDoubleWidth<High>.Low, High>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(descending:)",
                "title" : "init(descending: HL<High, NBKDoubleWidth<High>.Low>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(exactlystringliteral:)",
                "title" : "init?(exactlyStringLiteral: StaticString)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(high:)",
                "title" : "init(high: High)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(high:low:)",
                "title" : "init(high: High, low: NBKDoubleWidth<High>.Low)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(low:)",
                "title" : "init(low: NBKDoubleWidth<High>.Low)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(low:high:)",
                "title" : "init(low: NBKDoubleWidth<High>.Low, high: High)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/ascending",
                "title" : "var ascending: LH<NBKDoubleWidth<High>.Low, High>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/descending",
                "title" : "var descending: HL<High, NBKDoubleWidth<High>.Low>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/first",
                "title" : "var first: UInt",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/high-swift.property",
                "title" : "var high: High",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/last",
                "title" : "var last: UInt",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/lastindex",
                "title" : "var lastIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/low-swift.property",
                "title" : "var low: NBKDoubleWidth<High>.Low",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/tail",
                "title" : "var tail: NBKDoubleWidth<High>.Digit",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftleft(major:)",
                "title" : "func bitShiftLeft(major: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftleft(major:minor:)",
                "title" : "func bitShiftLeft(major: Int, minor: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftleftsmart(by:)",
                "title" : "func bitShiftLeftSmart(by: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftright(major:)",
                "title" : "func bitShiftRight(major: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftright(major:minor:)",
                "title" : "func bitShiftRight(major: Int, minor: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftrightsmart(by:)",
                "title" : "func bitShiftRightSmart(by: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedleft(major:)",
                "title" : "func bitShiftedLeft(major: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedleft(major:minor:)",
                "title" : "func bitShiftedLeft(major: Int, minor: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedleftsmart(by:)",
                "title" : "func bitShiftedLeftSmart(by: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedright(major:)",
                "title" : "func bitShiftedRight(major: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedright(major:minor:)",
                "title" : "func bitShiftedRight(major: Int, minor: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedrightsmart(by:)",
                "title" : "func bitShiftedRightSmart(by: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividingfullwidth(_:)-6zn3u",
                "title" : "func dividingFullWidth(NBKDoubleWidth<NBKDoubleWidth<High>>) -> QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividingfullwidthreportingoverflow(_:)-27oc0",
                "title" : "func dividingFullWidthReportingOverflow(NBKDoubleWidth<NBKDoubleWidth<High>>) -> PVO<QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/formquotientwithremainderreportingoverflow(dividingby:)",
                "title" : "func formQuotientWithRemainderReportingOverflow(dividingBy: NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>.Digit>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplied(by:adding:)",
                "title" : "func multiplied(by: NBKDoubleWidth<High>.Digit, adding: NBKDoubleWidth<High>.Digit) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedfullwidth(by:adding:)",
                "title" : "func multipliedFullWidth(by: NBKDoubleWidth<High>.Digit, adding: NBKDoubleWidth<High>.Digit) -> HL<NBKDoubleWidth<High>.Digit, NBKDoubleWidth<High>.Magnitude>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedreportingoverflow(by:adding:)",
                "title" : "func multipliedReportingOverflow(by: NBKDoubleWidth<High>.Digit, adding: NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiply(by:add:)",
                "title" : "func multiply(by: NBKDoubleWidth<High>.Digit, add: NBKDoubleWidth<High>.Digit)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyfullwidth(by:add:)",
                "title" : "func multiplyFullWidth(by: NBKDoubleWidth<High>.Digit, add: NBKDoubleWidth<High>.Digit) -> NBKDoubleWidth<High>.Digit",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyreportingoverflow(by:add:)",
                "title" : "func multiplyReportingOverflow(by: NBKDoubleWidth<High>.Digit, add: NBKDoubleWidth<High>.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousmutablestorage(_:)",
                "title" : "func withContiguousMutableStorage<T>((inout UnsafeMutableBufferPointer<UInt>) throws -> T) rethrows -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousstorage(_:)",
                "title" : "func withContiguousStorage<T>((UnsafeBufferPointer<UInt>) throws -> T) rethrows -> T",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(unchecked:)",
                "title" : "subscript(unchecked _: Int) -> UInt",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitpattern-swift.typealias",
                "title" : "NBKDoubleWidth.BitPattern",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/digit",
                "title" : "NBKDoubleWidth.Digit",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/high-swift.typealias",
                "title" : "NBKDoubleWidth.High",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/low-swift.typealias",
                "title" : "NBKDoubleWidth.Low",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/magnitude-swift.typealias",
                "title" : "NBKDoubleWidth.Magnitude",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/count-swift.type.property",
                "title" : "static var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/description-swift.type.property",
                "title" : "static var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/issigned-94hrq",
                "title" : "static var isSigned: Bool",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+(_:)",
                    "title" : "static func + (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+=(_:_:)-nist",
                    "title" : "static func += (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-=(_:_:)-3m2lq",
                    "title" : "static func -= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/zero",
                    "title" : "static var zero: Self",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/additivearithmetic-implementations",
                "title" : "AdditiveArithmetic Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/difference(from:)",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/firstrange(of:)-183tn",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formindex(before:)",
                    "title" : "func formIndex(before: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/lastindex(of:)",
                    "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/!=(_:_:)-4r6y6",
                    "title" : "static func != <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/!=(_:_:)-97m9r",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&(_:_:)",
                    "title" : "static func & (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&=(_:_:)",
                    "title" : "static func &= (inout NBKDoubleWidth<High>, NBKDoubleWidth<High>)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/==(_:_:)-7wvmj",
                    "title" : "static func == <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-1sutw",
                    "title" : "static func > <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-2pre",
                    "title" : "static func < <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-4c827",
                    "title" : "static func ^ (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-d8rj",
                    "title" : "static func | (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-2hvnj",
                    "title" : "static func <= <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-2u1g1",
                    "title" : "static func ^= (inout NBKDoubleWidth<High>, NBKDoubleWidth<High>)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-42r7i",
                    "title" : "static func |= (inout NBKDoubleWidth<High>, NBKDoubleWidth<High>)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-7u94a",
                    "title" : "static func >= <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-2dvcn",
                    "title" : "static func >> (NBKDoubleWidth<High>, some BinaryInteger) -> NBKDoubleWidth<High>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-4gi3w",
                    "title" : "static func << <RHS>(Self, RHS) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-60otg",
                    "title" : "static func >> <RHS>(Self, RHS) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-ayia",
                    "title" : "static func << (NBKDoubleWidth<High>, some BinaryInteger) -> NBKDoubleWidth<High>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__=(_:_:)-5llyo",
                    "title" : "static func <<= (inout NBKDoubleWidth<High>, some BinaryInteger)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__=(_:_:)-67kkp",
                    "title" : "static func >>= <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__=(_:_:)-6oc7y",
                    "title" : "static func <<= <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__=(_:_:)-9gzrm",
                    "title" : "static func >>= (inout NBKDoubleWidth<High>, some BinaryInteger)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/~(_:)-5f8gs",
                    "title" : "static func ~ (NBKDoubleWidth<High>) -> NBKDoubleWidth<High>",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-533xy",
                    "title" : "init(some BinaryInteger)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(clamping:)-5s7fi",
                    "title" : "init<T>(clamping: T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(truncatingifneeded:)-9yvsw",
                    "title" : "init<T>(truncatingIfNeeded: T)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/words",
                    "title" : "var words: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/ismultiple(of:)",
                    "title" : "func isMultiple(of: Self) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/binaryinteger-implementations",
                "title" : "BinaryInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/count-swift.property",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/firstrange(of:)-2pzmm",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formindex(after:)",
                    "title" : "func formIndex(after: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/map(_:)-3200w",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/'...(_:)-1597e",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/'...(_:)-5houl",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-10z47",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-2ymth",
                    "title" : "static func < (NBKDoubleWidth<High>, NBKDoubleWidth<High>) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-3sdwd",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-4uqnv",
                    "title" : "static func < (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-2dpy3",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-2v3al",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-54sit",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-8pwmx",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/!=(_:_:)-2s4k6",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/==(_:_:)-16pox",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/==(_:_:)-8a96z",
                    "title" : "static func == (NBKDoubleWidth<High>, NBKDoubleWidth<High>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(extendedgraphemeclusterliteral:)",
                    "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(integerliteral:)",
                    "title" : "init(integerLiteral: NBKDoubleWidth<High>.Digit.IntegerLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/expressiblebyintegerliteral-implementations",
                "title" : "ExpressibleByIntegerLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(stringliteral:)",
                    "title" : "init(stringLiteral: StaticString)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/expressiblebystringliteral-implementations",
                "title" : "ExpressibleByStringLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(unicodescalarliteral:)",
                    "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/expressiblebyunicodescalarliteral-implementations",
                "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*(_:_:)-76tw9",
                    "title" : "static func &* (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*=(_:_:)-8ghqk",
                    "title" : "static func &*= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+(_:_:)-2wwfw",
                    "title" : "static func &+ (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+=(_:_:)-9jbh3",
                    "title" : "static func &+= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-(_:_:)-4lcl3",
                    "title" : "static func &- (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-=(_:_:)-7zd4q",
                    "title" : "static func &-= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-17uf3",
                    "title" : "static func &<< (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-5cr1g",
                    "title" : "static func &>> (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-5ivpl",
                    "title" : "static func &>> <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-6hh49",
                    "title" : "static func &<< <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__=(_:_:)-1gsio",
                    "title" : "static func &<<= (inout NBKDoubleWidth<High>, some BinaryInteger)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__=(_:_:)-2mtff",
                    "title" : "static func &>>= (inout NBKDoubleWidth<High>, some BinaryInteger)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__=(_:_:)-32fm5",
                    "title" : "static func &>>= <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__=(_:_:)-66eo2",
                    "title" : "static func &<<= <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-5s32a",
                    "title" : "static func << <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-6p28k",
                    "title" : "static func >> <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/~(_:)-18oju",
                    "title" : "static func ~ (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-61xql",
                    "title" : "init<T>(T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-8k8fr",
                    "title" : "init?(String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:radix:)-837ky",
                    "title" : "init?<S>(S, radix: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bigendian:)-28a8x",
                    "title" : "init(bigEndian: NBKDoubleWidth<High>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bigendian:)-4e0nb",
                    "title" : "init(bigEndian: Self)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(clamping:)-7ll74",
                    "title" : "init<Other>(clamping: Other)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(exactly:)-777qp",
                    "title" : "init?<T>(exactly: T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(littleendian:)-3vasl",
                    "title" : "init(littleEndian: NBKDoubleWidth<High>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(littleendian:)-4t5za",
                    "title" : "init(littleEndian: Self)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(truncatingifneeded:)-2nr1a",
                    "title" : "init<T>(truncatingIfNeeded: T)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bigendian",
                    "title" : "var bigEndian: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitwidth-swift.property",
                    "title" : "var bitWidth: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/byteswapped",
                    "title" : "var byteSwapped: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/leadingzerobitcount",
                    "title" : "var leadingZeroBitCount: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/littleendian",
                    "title" : "var littleEndian: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/nonzerobitcount",
                    "title" : "var nonzeroBitCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividedreportingoverflow(by:)-5v9qm",
                    "title" : "func dividedReportingOverflow(by: NBKDoubleWidth<High>) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/remainderreportingoverflow(dividingby:)-3ac0b",
                    "title" : "func remainderReportingOverflow(dividingBy: NBKDoubleWidth<High>) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitwidth-swift.type.property",
                    "title" : "static var bitWidth: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/max",
                    "title" : "static var max: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/min",
                    "title" : "static var min: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/random(in:)-3grb6",
                    "title" : "static func random(in: Range<Self>) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/random(in:)-iwp4",
                    "title" : "static func random(in: ClosedRange<Self>) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/random(in:using:)-6jngj",
                    "title" : "static func random<T>(in: Range<Self>, using: inout T) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/random(in:using:)-8g5he",
                    "title" : "static func random<T>(in: ClosedRange<Self>, using: inout T) -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/fixedwidthinteger-implementations",
                "title" : "FixedWidthInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/partition(by:)-2uaao",
                    "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/partition(by:)-7pdes",
                    "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/reverse()",
                    "title" : "func reverse()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/shuffle()",
                    "title" : "func shuffle()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/shuffle(using:)",
                    "title" : "func shuffle<T>(using: inout T)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/sort()",
                    "title" : "func sort()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/sort(by:)",
                    "title" : "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/swapat(_:_:)",
                    "title" : "func swapAt(Self.Index, Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousmutablestorageifavailable(_:)-9kktr",
                    "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousmutablestorageifavailable(_:)-k6yz",
                    "title" : "func withContiguousMutableStorageIfAvailable<T>((inout UnsafeMutableBufferPointer<UInt>) throws -> T) rethrows -> T?",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(_:)",
                    "title" : "subscript(Int) -> UInt",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/mutablecollection-implementations",
                "title" : "MutableCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/\/(_:_:)-3t13o",
                    "title" : "static func \/ (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/\/(_:_:)-5ojtv",
                    "title" : "static func \/ (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/\/=(_:_:)-5j125",
                    "title" : "static func \/= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/\/=(_:_:)-74pyp",
                    "title" : "static func \/= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-6uz0d",
                    "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-7lvky",
                    "title" : "static func % (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-2f95j",
                    "title" : "static func %= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-5n7it",
                    "title" : "static func %= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-1sktp",
                    "title" : "init?(String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:radix:)-3akmh",
                    "title" : "init?(some StringProtocol, radix: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bit:)-3q7ym",
                    "title" : "init(bit: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bit:)-55evi",
                    "title" : "init(bit: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(digit:)-1k0ze",
                    "title" : "init(digit: Self.Digit)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(digit:)-7enbr",
                    "title" : "init(digit: NBKDoubleWidth<High>.Digit)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(magnitude:)",
                    "title" : "init?(magnitude: Self.Magnitude)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(sign:magnitude:)",
                    "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(words:)",
                    "title" : "init?(words: some RandomAccessCollection<UInt>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(words:issigned:)",
                    "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/description-swift.property",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/iseven",
                    "title" : "var isEven: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/islessthanzero",
                    "title" : "var isLessThanZero: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/ismorethanzero",
                    "title" : "var isMoreThanZero: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/isodd",
                    "title" : "var isOdd: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/ispowerof2",
                    "title" : "var isPowerOf2: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/iszero",
                    "title" : "var isZero: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/leastsignificantbit",
                    "title" : "var leastSignificantBit: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/mostsignificantbit",
                    "title" : "var mostSignificantBit: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/trailingzerobitcount",
                    "title" : "var trailingZeroBitCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/compared(to:)-27rkr",
                    "title" : "func compared(to: NBKDoubleWidth<High>.Digit) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/compared(to:)-2iccq",
                    "title" : "func compared(to: NBKDoubleWidth<High>) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/description(radix:uppercase:)",
                    "title" : "func description(radix: Int, uppercase: Bool) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividereportingoverflow(by:)-3o5v2",
                    "title" : "func divideReportingOverflow(by: NBKDoubleWidth<High>.Digit) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividereportingoverflow(by:)-9062r",
                    "title" : "func divideReportingOverflow(by: NBKDoubleWidth<High>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividedreportingoverflow(by:)-3cxts",
                    "title" : "func dividedReportingOverflow(by: NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formonescomplement()",
                    "title" : "func formOnesComplement()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formremainderreportingoverflow(dividingby:)-4yqzw",
                    "title" : "func formRemainderReportingOverflow(dividingBy: NBKDoubleWidth<High>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formremainderreportingoverflow(dividingby:)-833km",
                    "title" : "func formRemainderReportingOverflow(dividingBy: NBKDoubleWidth<High>.Digit) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formtwoscomplement()",
                    "title" : "func formTwosComplement()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formtwoscomplementreportingoverflow()",
                    "title" : "func formTwosComplementReportingOverflow() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formtwoscomplementsubsequence(_:)",
                    "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/onescomplement()",
                    "title" : "func onesComplement() -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/quotientandremainder(dividingby:)",
                    "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/quotientandremainderreportingoverflow(dividingby:)-6322f",
                    "title" : "func quotientAndRemainderReportingOverflow(dividingBy: NBKDoubleWidth<High>.Digit) -> PVO<QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>.Digit>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/quotientandremainderreportingoverflow(dividingby:)-s8rb",
                    "title" : "func quotientAndRemainderReportingOverflow(dividingBy: NBKDoubleWidth<High>) -> PVO<QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/remainderreportingoverflow(dividingby:)-7gczb",
                    "title" : "func remainderReportingOverflow(dividingBy: NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>.Digit>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/signum()",
                    "title" : "func signum() -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/twoscomplement()",
                    "title" : "func twosComplement() -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/twoscomplementreportingoverflow()",
                    "title" : "func twosComplementReportingOverflow() -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/twoscomplementsubsequence(_:)",
                    "title" : "func twosComplementSubsequence(Bool) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/one",
                    "title" : "static var one: Self",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/nbkbinaryinteger-implementations",
                "title" : "NBKBinaryInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bitpattern:)-8av7p",
                    "title" : "init(bitPattern: NBKDoubleWidth<High>.BitPattern)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bitpattern:)-8xw77",
                    "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitpattern-swift.property",
                    "title" : "var bitPattern: NBKDoubleWidth<High>.BitPattern",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/nbkbitpatternconvertible-implementations",
                "title" : "NBKBitPatternConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*(_:_:)-6ee7z",
                    "title" : "static func &* (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*(_:_:)-99w5r",
                    "title" : "static func &* (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*=(_:_:)-3g5ru",
                    "title" : "static func &*= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*=(_:_:)-5caue",
                    "title" : "static func &*= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+(_:_:)-4fx59",
                    "title" : "static func &+ (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+(_:_:)-5p1oa",
                    "title" : "static func &+ (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+=(_:_:)-61pdw",
                    "title" : "static func &+= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+=(_:_:)-8m3cr",
                    "title" : "static func &+= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-(_:_:)-7plcq",
                    "title" : "static func &- (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-(_:_:)-8u4m6",
                    "title" : "static func &- (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-=(_:_:)-4nc33",
                    "title" : "static func &-= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-=(_:_:)-79y07",
                    "title" : "static func &-= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/*(_:_:)-169ux",
                    "title" : "static func * (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/*(_:_:)-5c4g8",
                    "title" : "static func * (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/*=(_:_:)-6f3hs",
                    "title" : "static func *= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/*=(_:_:)-puov",
                    "title" : "static func *= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+(_:_:)-7govv",
                    "title" : "static func + (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+(_:_:)-9y9cj",
                    "title" : "static func + (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+=(_:_:)-6kxz1",
                    "title" : "static func += (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+=(_:_:)-70xbj",
                    "title" : "static func += (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-(_:_:)-2ur0j",
                    "title" : "static func - (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-(_:_:)-9bjzw",
                    "title" : "static func - (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-=(_:_:)-2assg",
                    "title" : "static func -= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-=(_:_:)-9tr5c",
                    "title" : "static func -= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-7kew3",
                    "title" : "init?(String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(repeating:)-2zt2y",
                    "title" : "init(repeating: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(repeating:)-4hf2m",
                    "title" : "init(repeating: Bool)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/addreportingoverflow(_:)-32dm2",
                    "title" : "func addReportingOverflow(NBKDoubleWidth<High>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/addreportingoverflow(_:)-8n6ql",
                    "title" : "func addReportingOverflow(NBKDoubleWidth<High>.Digit) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/addingreportingoverflow(_:)-1bdur",
                    "title" : "func addingReportingOverflow(NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/addingreportingoverflow(_:)-avka",
                    "title" : "func addingReportingOverflow(NBKDoubleWidth<High>) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftleft(by:)-64la4",
                    "title" : "func bitShiftLeft(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftleft(by:)-8gc4j",
                    "title" : "func bitShiftLeft(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftright(by:)-4lgk7",
                    "title" : "func bitShiftRight(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftright(by:)-6adrm",
                    "title" : "func bitShiftRight(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedleft(by:)",
                    "title" : "func bitShiftedLeft(by: Int) -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedright(by:)",
                    "title" : "func bitShiftedRight(by: Int) -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividingfullwidth(_:)-fshi",
                    "title" : "func dividingFullWidth(HL<NBKDoubleWidth<High>, NBKDoubleWidth<High>.Magnitude>) -> QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividingfullwidthreportingoverflow(_:)-6imc",
                    "title" : "func dividingFullWidthReportingOverflow(HL<NBKDoubleWidth<High>, NBKDoubleWidth<High>.Magnitude>) -> PVO<QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedfullwidth(by:)-6jba7",
                    "title" : "func multipliedFullWidth(by: NBKDoubleWidth<High>.Digit) -> HL<NBKDoubleWidth<High>.Digit, NBKDoubleWidth<High>.Magnitude>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedfullwidth(by:)-729im",
                    "title" : "func multipliedFullWidth(by: NBKDoubleWidth<High>) -> HL<NBKDoubleWidth<High>, NBKDoubleWidth<High>.Magnitude>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedreportingoverflow(by:)-640bw",
                    "title" : "func multipliedReportingOverflow(by: NBKDoubleWidth<High>) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedreportingoverflow(by:)-6cbs9",
                    "title" : "func multipliedReportingOverflow(by: NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyfullwidth(by:)-17opd",
                    "title" : "func multiplyFullWidth(by: NBKDoubleWidth<High>.Digit) -> NBKDoubleWidth<High>.Digit",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyfullwidth(by:)-8zp8z",
                    "title" : "func multiplyFullWidth(by: NBKDoubleWidth<High>) -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyreportingoverflow(by:)-2971n",
                    "title" : "func multiplyReportingOverflow(by: NBKDoubleWidth<High>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyreportingoverflow(by:)-4gsvd",
                    "title" : "func multiplyReportingOverflow(by: NBKDoubleWidth<High>.Digit) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/negatereportingoverflow()",
                    "title" : "func negateReportingOverflow() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/negatedreportingoverflow()",
                    "title" : "func negatedReportingOverflow() -> PVO<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subtractreportingoverflow(_:)-4c6cf",
                    "title" : "func subtractReportingOverflow(NBKDoubleWidth<High>.Digit) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subtractreportingoverflow(_:)-9fms7",
                    "title" : "func subtractReportingOverflow(NBKDoubleWidth<High>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subtractingreportingoverflow(_:)-3t1y",
                    "title" : "func subtractingReportingOverflow(NBKDoubleWidth<High>) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subtractingreportingoverflow(_:)-yj1d",
                    "title" : "func subtractingReportingOverflow(NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/nbkfixedwidthinteger-implementations",
                "title" : "NBKFixedWidthInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-(_:)-8aw0m",
                    "title" : "static func - (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/negate()-90c3g",
                    "title" : "func negate()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/negated()",
                    "title" : "func negated() -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/nbksignedinteger-implementations",
                "title" : "NBKSignedInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(exactly:)-5v9ae",
                    "title" : "init?<T>(exactly: T)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/magnitude-swift.property",
                    "title" : "var magnitude: NBKDoubleWidth<High>.Magnitude",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/numeric-implementations",
                "title" : "Numeric Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/endindex",
                    "title" : "var endIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/indices",
                    "title" : "var indices: Range<Int>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/startindex",
                    "title" : "var startIndex: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/distance(from:to:)",
                    "title" : "func distance(from: Int, to: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/index(_:offsetby:)",
                    "title" : "func index(Int, offsetBy: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/index(after:)",
                    "title" : "func index(after: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/index(before:)",
                    "title" : "func index(before: Int) -> Int",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/flatmap(_:)-1c1o8",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/flatmap(_:)-9e7f1",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/map(_:)-64a92",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousstorageifavailable(_:)-875hn",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousstorageifavailable(_:)-8z0j8",
                    "title" : "func withContiguousStorageIfAvailable<T>((UnsafeBufferPointer<UInt>) throws -> T) rethrows -> T?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-6psik",
                    "title" : "init<T>(T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(exactly:)-731o6",
                    "title" : "init?<T>(exactly: T)",
                    "type" : "init"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/issigned-42eie",
                    "title" : "static var isSigned: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/signedinteger-implementations",
                "title" : "SignedInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-(_:)-2fheo",
                    "title" : "static func - (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/negate()-7bhxv",
                    "title" : "func negate()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/signednumeric-implementations",
                "title" : "SignedNumeric Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/advanced(by:)",
                    "title" : "func advanced(by: Int) -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/distance(to:)",
                    "title" : "func distance(to: NBKDoubleWidth<High>) -> Int",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/strideable-implementations",
                "title" : "Strideable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-2f57n",
                    "title" : "init<T>(T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(exactly:)-1f3qn",
                    "title" : "init?<T>(exactly: T)",
                    "type" : "init"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/issigned-20jsh",
                    "title" : "static var isSigned: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/unsignedinteger-implementations",
                "title" : "UnsignedInteger Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkdoublewidth",
            "title" : "NBKDoubleWidth",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkendianness\/big",
                "title" : "case big",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/numberick\/nbkendianness\/little",
                "title" : "case little",
                "type" : "case"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkendianness\/system",
                "title" : "static var system: NBKEndianness",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkendianness\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkendianness\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkendianness",
            "title" : "NBKEndianness",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/cache\/kib(_:)",
                    "title" : "static func KiB(Int) -> NBKPrimeSieve.Cache",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/cache\/words(_:)",
                    "title" : "static func words(Int) -> NBKPrimeSieve.Cache",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkprimesieve\/cache",
                "title" : "NBKPrimeSieve.Cache",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/culls\/x11",
                    "title" : "static var x11: NBKPrimeSieve.Culls",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/culls\/x13",
                    "title" : "static var x13: NBKPrimeSieve.Culls",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/culls\/x17",
                    "title" : "static var x17: NBKPrimeSieve.Culls",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/culls\/x19",
                    "title" : "static var x19: NBKPrimeSieve.Culls",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/culls\/x23",
                    "title" : "static var x23: NBKPrimeSieve.Culls",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/culls\/x29",
                    "title" : "static var x29: NBKPrimeSieve.Culls",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/culls\/x31",
                    "title" : "static var x31: NBKPrimeSieve.Culls",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkprimesieve\/culls",
                "title" : "NBKPrimeSieve.Culls",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/wheel\/x02",
                    "title" : "static var x02: NBKPrimeSieve.Wheel",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/wheel\/x03",
                    "title" : "static var x03: NBKPrimeSieve.Wheel",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/wheel\/x05",
                    "title" : "static var x05: NBKPrimeSieve.Wheel",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/wheel\/x07",
                    "title" : "static var x07: NBKPrimeSieve.Wheel",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkprimesieve\/wheel\/x11",
                    "title" : "static var x11: NBKPrimeSieve.Wheel",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkprimesieve\/wheel",
                "title" : "NBKPrimeSieve.Wheel",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkprimesieve\/init(cache:wheel:culls:capacity:)",
                "title" : "init(cache: NBKPrimeSieve.Cache, wheel: NBKPrimeSieve.Wheel, culls: NBKPrimeSieve.Culls, capacity: Int?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkprimesieve\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkprimesieve\/elements",
                "title" : "var elements: [UInt]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkprimesieve\/limit",
                "title" : "var limit: UInt",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkprimesieve\/increment()",
                "title" : "func increment()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkprimesieve",
            "title" : "NBKPrimeSieve",
            "type" : "class"
          },
          {
            "title" : "Integers",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/numberick\/int128",
            "title" : "Int128",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/int256",
            "title" : "Int256",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/int512",
            "title" : "Int512",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/int1024",
            "title" : "Int1024",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/int2048",
            "title" : "Int2048",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/int4096",
            "title" : "Int4096",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint128",
            "title" : "UInt128",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint256",
            "title" : "UInt256",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint512",
            "title" : "UInt512",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint1024",
            "title" : "UInt1024",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint2048",
            "title" : "UInt2048",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint4096",
            "title" : "UInt4096",
            "type" : "typealias"
          },
          {
            "title" : "Abbreviations",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/numberick\/hl",
            "title" : "HL",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/io",
            "title" : "IO",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/lh",
            "title" : "LH",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/pvo",
            "title" : "PVO",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/qr",
            "title" : "QR",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/sm",
            "title" : "SM",
            "type" : "typealias"
          },
          {
            "title" : "Namespaces",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/cycliciterator\/init(_:)",
                    "title" : "init?(Base)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/cycliciterator\/next()",
                    "title" : "func next() -> Base.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/cycliciterator\/reset()",
                    "title" : "func reset()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/cycliciterator\/set(iteration:)",
                    "title" : "func set(iteration: UInt)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/cycliciterator\/set(unchecked:)",
                    "title" : "func set(unchecked: Base.Index)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/cycliciterator",
                "title" : "NBK.CyclicIterator",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/init(_:formtwoscomplement:)",
                    "title" : "init(Base, formTwosComplement: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/init(magnitudeof:issigned:)",
                    "title" : "init(magnitudeOf: Base, isSigned: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/init(twoscomplementof:)",
                    "title" : "init(twosComplementOf: Base)",
                    "type" : "init"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/subscript(_:)",
                    "title" : "subscript(Base.Index) -> Base.Element",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/last",
                        "title" : "var last: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/difference(from:)",
                        "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/difference(from:by:)",
                        "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/droplast(_:)",
                        "title" : "func dropLast(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/firstrange(of:)-8gzr3",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/formindex(before:)",
                        "title" : "func formIndex(before: inout Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/joined(separator:)-2t9qu",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/last(where:)",
                        "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/lastindex(of:)",
                        "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/lastindex(where:)",
                        "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/reversed()",
                        "title" : "func reversed() -> ReversedCollection<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/suffix(_:)",
                        "title" : "func suffix(Int) -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/bidirectionalcollection-implementations",
                    "title" : "BidirectionalCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/count",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/endindex",
                        "title" : "var endIndex: Base.Index",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/first",
                        "title" : "var first: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/startindex",
                        "title" : "var startIndex: Base.Index",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/firstindex(of:)",
                        "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/firstrange(of:)-9nv3v",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/formindex(after:)",
                        "title" : "func formIndex(after: inout Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/index(of:)",
                        "title" : "func index(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/makeiterator()",
                        "title" : "func makeIterator() -> IndexingIterator<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/map(_:)-5a6u4",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/prefix(_:)",
                        "title" : "func prefix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/ranges(of:)",
                        "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/split(separator:maxsplits:omittingemptysubsequences:)",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/trimmingprefix(_:)",
                        "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/indices",
                        "title" : "var indices: Base.Indices",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/distance(from:to:)",
                        "title" : "func distance(from: Base.Index, to: Base.Index) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/index(_:offsetby:)",
                        "title" : "func index(Base.Index, offsetBy: Int) -> Base.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Base.Index, offsetBy: Int, limitedBy: Base.Index) -> Base.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/index(after:)",
                        "title" : "func index(after: Base.Index) -> Base.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/index(before:)",
                        "title" : "func index(before: Base.Index) -> Base.Index",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/randomaccesscollection-implementations",
                    "title" : "RandomAccessCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/contains(_:)",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/flatmap(_:)-3z0ak",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/flatmap(_:)-68rn3",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/joined()",
                        "title" : "func joined() -> FlattenSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/joined(separator:)-2pecg",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/joined(separator:)-2x2fh",
                        "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/map(_:)-8tyk6",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/maybetwoscomplement",
                "title" : "NBK.MaybeTwosComplement",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/init(_:sign:)",
                    "title" : "init(Base, sign: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/init(fromstrictsignedintegersubsequence:)",
                    "title" : "init?<T>(fromStrictSignedIntegerSubSequence: T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/init(fromstrictunsignedintegersubsequence:)",
                    "title" : "init<T>(fromStrictUnsignedIntegerSubSequence: T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/init(rebasing:)-1ox02",
                    "title" : "init<T>(rebasing: NBK.SuccinctInt<UnsafeBufferPointer<T>.SubSequence>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/init(rebasing:)-9yyxh",
                    "title" : "init<T>(rebasing: NBK.SuccinctInt<UnsafeMutableBufferPointer<T>.SubSequence>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/init(unchecked:sign:)",
                    "title" : "init(unchecked: Base, sign: Bool)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/body",
                    "title" : "let body: Base",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/sign",
                    "title" : "let sign: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/compared(to:)",
                    "title" : "func compared<T>(to: NBK.SuccinctInt<T>) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/validate(_:sign:)",
                    "title" : "static func validate(Base, sign: Bool) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/succinctint",
                "title" : "NBK.SuccinctInt",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/init(_:reversed:)-13ihw",
                    "title" : "init(ReversedCollection<Base>, reversed: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/init(_:reversed:)-1l5zu",
                    "title" : "init(Base, reversed: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/init(_:reversed:)-4zmpu",
                    "title" : "init(NBK.TwinHeaded<Base>, reversed: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/init(rebasing:)-172bd",
                    "title" : "init<T>(rebasing: NBK.TwinHeaded<Base>.SubSequence)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/init(rebasing:)-1x43e",
                    "title" : "init<T>(rebasing: NBK.TwinHeaded<Base>.SubSequence)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/base-swift.property",
                    "title" : "var base: Base",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/direction",
                    "title" : "var direction: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/isbacktofront",
                    "title" : "var isBackToFront: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/isfronttoback",
                    "title" : "var isFrontToBack: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/baseindex(_:)",
                    "title" : "func baseIndex(Int) -> Base.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/baseindices(_:)",
                    "title" : "func baseIndices(Range<Int>) -> Range<Base.Index>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/basesubscriptindex(_:)",
                    "title" : "func baseSubscriptIndex(Int) -> Base.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/reverse()-4l7bu",
                    "title" : "func reverse()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/reversed()",
                    "title" : "func reversed() -> NBK.TwinHeaded<Base>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/base-swift.typealias",
                    "title" : "NBK.TwinHeaded.Base",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/last",
                        "title" : "var last: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/difference(from:)",
                        "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/difference(from:by:)",
                        "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/droplast(_:)",
                        "title" : "func dropLast(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/firstrange(of:)-9lume",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/formindex(before:)",
                        "title" : "func formIndex(before: inout Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/joined(separator:)-1v1pn",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/last(where:)",
                        "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/lastindex(of:)",
                        "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/lastindex(where:)",
                        "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/suffix(_:)",
                        "title" : "func suffix(Int) -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/bidirectionalcollection-implementations",
                    "title" : "BidirectionalCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/endindex",
                        "title" : "var endIndex: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/first",
                        "title" : "var first: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/startindex",
                        "title" : "var startIndex: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/contains(_:)-3o89m",
                        "title" : "func contains<C>(C) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/firstindex(of:)",
                        "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/firstrange(of:)-95oin",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/formindex(after:)",
                        "title" : "func formIndex(after: inout Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/index(of:)",
                        "title" : "func index(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/makeiterator()",
                        "title" : "func makeIterator() -> IndexingIterator<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/map(_:)-3zdrv",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/prefix(_:)",
                        "title" : "func prefix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/ranges(of:)",
                        "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/split(separator:maxsplits:omittingemptysubsequences:)-16wck",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/split(separator:maxsplits:omittingemptysubsequences:)-8e7a8",
                        "title" : "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/trimmingprefix(_:)",
                        "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/subscript(_:)-44lz7",
                        "title" : "subscript(Int) -> Base.Element",
                        "type" : "subscript"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/partition(by:)-2uk03",
                        "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/partition(by:)-9mmpe",
                        "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/reverse()-1b798",
                        "title" : "func reverse()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/shuffle()",
                        "title" : "func shuffle()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/shuffle(using:)",
                        "title" : "func shuffle<T>(using: inout T)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/sort()",
                        "title" : "func sort()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/sort(by:)",
                        "title" : "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/swapat(_:_:)",
                        "title" : "func swapAt(Self.Index, Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/withcontiguousmutablestorageifavailable(_:)",
                        "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/subscript(_:)-6mv54",
                        "title" : "subscript(Int) -> Base.Element",
                        "type" : "subscript"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/mutablecollection-implementations",
                    "title" : "MutableCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/indices",
                        "title" : "var indices: Range<Int>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/distance(from:to:)",
                        "title" : "func distance(from: Int, to: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/index(_:offsetby:)",
                        "title" : "func index(Int, offsetBy: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/index(after:)",
                        "title" : "func index(after: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/index(before:)",
                        "title" : "func index(before: Int) -> Int",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/randomaccesscollection-implementations",
                    "title" : "RandomAccessCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/contains(_:)-3q423",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/flatmap(_:)-67t0z",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/flatmap(_:)-8mkks",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/joined()",
                        "title" : "func joined() -> FlattenSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/joined(separator:)-4m9lh",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/joined(separator:)-6bhnw",
                        "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/map(_:)-3g7qr",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/split(separator:maxsplits:omittingemptysubsequences:)-vwc9",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/twinheaded\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/twinheaded\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/twinheaded",
                "title" : "NBK.TwinHeaded",
                "type" : "struct"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/ism",
                "title" : "NBK.ISM",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/lessthanzero",
                "title" : "NBK.LessThanZero",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/morethanzero",
                "title" : "NBK.MoreThanZero",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/nonpowerof2",
                "title" : "NBK.NonPowerOf2",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/nonzero",
                "title" : "NBK.NonZero",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/pbi",
                "title" : "NBK.PBI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/psi",
                "title" : "NBK.PSI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/pui",
                "title" : "NBK.PUI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/powerof2",
                "title" : "NBK.PowerOf2",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/sbi",
                "title" : "NBK.SBI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/sbiss",
                "title" : "NBK.SBISS",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/ssi",
                "title" : "NBK.SSI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/ssiss",
                "title" : "NBK.SSISS",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/ssm",
                "title" : "NBK.SSM",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/ssmss",
                "title" : "NBK.SSMSS",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/sui",
                "title" : "NBK.SUI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/suiss",
                "title" : "NBK.SUISS",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/sign",
                "title" : "NBK.Sign",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/tbi",
                "title" : "NBK.TBI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/tsi",
                "title" : "NBK.TSI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/tui",
                "title" : "NBK.TUI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/u128x32",
                "title" : "NBK.U128X32",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/u128x64",
                "title" : "NBK.U128X64",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/u256x32",
                "title" : "NBK.U256X32",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/u256x64",
                "title" : "NBK.U256X64",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/wide2",
                "title" : "NBK.Wide2",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/wide3",
                "title" : "NBK.Wide3",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/zero",
                "title" : "NBK.Zero",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/zeroorless",
                "title" : "NBK.ZeroOrLess",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/zeroormore",
                "title" : "NBK.ZeroOrMore",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/isbigendian",
                "title" : "static var isBigEndian: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/islittleendian",
                "title" : "static var isLittleEndian: Bool",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/and(_:_:)",
                "title" : "static func and(NBK.Sign, NBK.Sign) -> NBK.Sign",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/arrayindex(_:offsetby:limitedby:)",
                "title" : "static func arrayIndex(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/ascii(_:)",
                "title" : "static func ascii(NBK.Sign) -> UInt8",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/bit(_:)",
                "title" : "static func bit(NBK.Sign) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/bitcast(_:)-1kuiz",
                "title" : "static func bitCast<A0, A1, B0, B1>(HL<A0, A1>) -> HL<B0, B1>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/bitcast(_:)-5jtl5",
                "title" : "static func bitCast<A0, A1, B0, B1>(PVO<QR<A0, A1>>) -> PVO<QR<B0, B1>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/bitcast(_:)-7qegl",
                "title" : "static func bitCast<A0, A1, B0, B1>(QR<A0, A1>) -> QR<B0, B1>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/bitcast(_:)-7r5yg",
                "title" : "static func bitCast<A0, B0>(PVO<A0>) -> PVO<B0>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/blackhole(_:)",
                "title" : "static func blackHole<T>(T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/blackholeidentity(_:)",
                "title" : "static func blackHoleIdentity<T>(T) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/blackholeinoutidentity(_:)",
                "title" : "static func blackHoleInoutIdentity<T>(inout T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/callsiteoutofboundsinfo(function:file:line:)",
                "title" : "static func callsiteOutOfBoundsInfo(function: StaticString, file: StaticString, line: UInt) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/callsiteoverflowinfo(function:file:line:)",
                "title" : "static func callsiteOverflowInfo(function: StaticString, file: StaticString, line: UInt) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/droplast(from:while:)",
                "title" : "static func dropLast<T>(from: T, while: (T.Element) -> Bool) -> T.SubSequence",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(_:as:)-1wo9x",
                "title" : "static func initOrBitCast<T, U>(T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(_:as:)-67xkt",
                "title" : "static func initOrBitCast<T, U>(T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(clamping:as:)-4r4ah",
                "title" : "static func initOrBitCast<T, U>(clamping: T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(clamping:as:)-6heju",
                "title" : "static func initOrBitCast<T, U>(clamping: T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(exactly:as:)-7ycp1",
                "title" : "static func initOrBitCast<T, U>(exactly: T, as: U.Type) -> U?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(exactly:as:)-8dwkj",
                "title" : "static func initOrBitCast<T, U>(exactly: T, as: U.Type) -> U?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(truncating:as:)-6rhdy",
                "title" : "static func initOrBitCast<T, U>(truncating: T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(truncating:as:)-7lcao",
                "title" : "static func initOrBitCast<T, U>(truncating: T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initializegetcount(_:repeating:count:)",
                "title" : "static func initializeGetCount<T>(UnsafeMutablePointer<T>, repeating: T, count: Int) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initializegetcount(_:to:)",
                "title" : "static func initializeGetCount<T>(UnsafeMutablePointer<T>, to: UnsafeBufferPointer<T>) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/not(_:)",
                "title" : "static func not(NBK.Sign) -> NBK.Sign",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/or(_:_:)",
                "title" : "static func or(NBK.Sign, NBK.Sign) -> NBK.Sign",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/removeprefix(from:count:)",
                "title" : "static func removePrefix<T>(from: inout T, count: Int) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/removeprefix(from:maxlength:)",
                "title" : "static func removePrefix<T>(from: inout T, maxLength: Int) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/removesuffix(from:count:)",
                "title" : "static func removeSuffix<T>(from: inout T, count: Int) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/removesuffix(from:maxlength:)",
                "title" : "static func removeSuffix<T>(from: inout T, maxLength: Int) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/sign(_:)",
                "title" : "static func sign(Bool) -> NBK.Sign",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/someswiftbinaryinteger(_:)",
                "title" : "static func someSwiftBinaryInteger<T>(T) -> some BinaryInteger",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/someswiftfixedwidthinteger(_:)",
                "title" : "static func someSwiftFixedWidthInteger<T>(T) -> some FixedWidthInteger",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/unwrapping(_:)-1wfyk",
                "title" : "static func unwrapping<T>(UnsafeBufferPointer<T>) -> (baseAddress: UnsafePointer<T>, count: Int)?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/unwrapping(_:)-24stg",
                "title" : "static func unwrapping<T>(UnsafeMutableBufferPointer<T>) -> (baseAddress: UnsafeMutablePointer<T>, count: Int)?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/withunsafetemporaryallocation(copying:perform:)",
                "title" : "static func withUnsafeTemporaryAllocation<Element, Result>(copying: some Collection, perform: (UnsafeMutableBufferPointer<Element>) -> Result) -> Result",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/withunsafetemporaryallocation(of:count:perform:)",
                "title" : "static func withUnsafeTemporaryAllocation<Element, Result>(of: Element.Type, count: Int, perform: (UnsafeMutableBufferPointer<Element>) -> Result) -> Result",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/withunsafetemporaryallocation(of:perform:)",
                "title" : "static func withUnsafeTemporaryAllocation<Element, Result>(of: Element.Type, perform: (UnsafeMutablePointer<Element>) -> Result) -> Result",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/xor(_:_:)",
                "title" : "static func xor(NBK.Sign, NBK.Sign) -> NBK.Sign",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixalphabetdecoder\/init(radix:)",
                        "title" : "init(radix: Int)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixalphabetdecoder\/decode(_:)",
                        "title" : "func decode(UInt8) -> UInt8?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixalphabetdecoder",
                    "title" : "NBK.IntegerDescription.AnyRadixAlphabetDecoder",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/init(_:)-2jban",
                        "title" : "init(Int)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/init(_:)-7js6c",
                        "title" : "init(NBK.IntegerDescription.PerfectRadixSolution<Element>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/init(_:)-jmif",
                        "title" : "init(NBK.IntegerDescription.ImperfectRadixSolution<Element>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/base",
                        "title" : "let base: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/exponent",
                        "title" : "let exponent: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/power",
                        "title" : "let power: Element",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/base(as:)",
                        "title" : "func base<T>(as: T.Type) -> T",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/exponent(as:)",
                        "title" : "func exponent<T>(as: T.Type) -> T",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution",
                    "title" : "NBK.IntegerDescription.AnyRadixSolution",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/init(radix:)",
                        "title" : "init(radix: Int)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/decode(_:)-5uglf",
                        "title" : "func decode(StaticString) -> SM<Magnitude>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/decode(_:)-72r2r",
                        "title" : "func decode(some StringProtocol) -> SM<Magnitude>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/decode(_:)-f9ye",
                        "title" : "func decode(UnsafeBufferPointer<UInt8>) -> SM<Magnitude>?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder",
                    "title" : "NBK.IntegerDescription.Decoder",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/decode(_:)-4bl2n",
                        "title" : "func decode(some StringProtocol) -> SM<Magnitude>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/decode(_:)-4capf",
                        "title" : "func decode(StaticString) -> SM<Magnitude>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/decode(_:)-4rxbm",
                        "title" : "func decode(UnsafeBufferPointer<UInt8>) -> SM<Magnitude>?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix",
                    "title" : "NBK.IntegerDescription.DecoderDecodingRadix",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/encoder\/init(radix:uppercase:)",
                        "title" : "init(radix: Int, uppercase: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/encoder\/encode(_:)-4gikm",
                        "title" : "func encode(SM<some NBKUnsignedInteger>) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/encoder\/encode(_:)-4u3jc",
                        "title" : "func encode(some NBKBinaryInteger) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/encoder\/encode(_:)-q1t9",
                        "title" : "func encode(SM<some RandomAccessCollection<UInt>>) -> String",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/encoder",
                    "title" : "NBK.IntegerDescription.Encoder",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/divisor\/dividing(_:)",
                            "title" : "func dividing(Element) -> QR<Element, Element>",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/divisor",
                        "title" : "NBK.IntegerDescription.ImperfectRadixSolution.Divisor",
                        "type" : "struct"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/init(_:)",
                        "title" : "init?(NBK.IntegerDescription.AnyRadixSolution<Element>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/power",
                        "title" : "var power: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/solution",
                        "title" : "let solution: NBK.IntegerDescription.AnyRadixSolution<Element>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/base(as:)",
                        "title" : "func base<T>(as: T.Type) -> T",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/divisibilitybypowerupperbound(magnitude:)",
                        "title" : "func divisibilityByPowerUpperBound(magnitude: some Collection<Element>) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/divisor()",
                        "title" : "func divisor() -> NBK.IntegerDescription.ImperfectRadixSolution<Element>.Divisor",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/exponent(as:)",
                        "title" : "func exponent<T>(as: T.Type) -> T",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution",
                    "title" : "NBK.IntegerDescription.ImperfectRadixSolution",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/maxradixalphabetencoder\/init(uppercase:)",
                        "title" : "init(uppercase: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/maxradixalphabetencoder\/encode(_:)",
                        "title" : "func encode(UInt8) -> UInt8?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/maxradixalphabetencoder",
                    "title" : "NBK.IntegerDescription.MaxRadixAlphabetEncoder",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/divisor\/dividing(_:)",
                            "title" : "func dividing(Element) -> QR<Element, Element>",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/divisor",
                        "title" : "NBK.IntegerDescription.PerfectRadixSolution.Divisor",
                        "type" : "struct"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/init(_:)",
                        "title" : "init?(NBK.IntegerDescription.AnyRadixSolution<Element>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/solution",
                        "title" : "let solution: NBK.IntegerDescription.AnyRadixSolution<Element>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/base(as:)",
                        "title" : "func base<T>(as: T.Type) -> T",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/divisor()",
                        "title" : "func divisor() -> NBK.IntegerDescription.PerfectRadixSolution<Element>.Divisor",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/exponent(as:)",
                        "title" : "func exponent<T>(as: T.Type) -> T",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution",
                    "title" : "NBK.IntegerDescription.PerfectRadixSolution",
                    "type" : "struct"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/makesignbody(from:)",
                    "title" : "static func makeSignBody<UTF8>(from: UTF8) -> (sign: NBK.Sign, body: UTF8.SubSequence)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/makesignradixbody(from:)",
                    "title" : "static func makeSignRadixBody<UTF8>(from: UTF8) -> (sign: NBK.Sign, radix: Int, body: UTF8.SubSequence)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/removeleadingradix(from:)",
                    "title" : "static func removeLeadingRadix<UTF8>(from: inout UTF8) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/removeleadingsign(from:)",
                    "title" : "static func removeLeadingSign<UTF8>(from: inout UTF8) -> NBK.Sign?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/truncating(digits:radix:as:)",
                    "title" : "static func truncating<Digit>(digits: UnsafeBufferPointer<UInt8>, radix: Int, as: Digit.Type) -> Digit?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/withunsafetemporarysignprefix(minus:perform:)",
                    "title" : "static func withUnsafeTemporarySignPrefix<T>(minus: Bool, perform: (UnsafeBufferPointer<UInt8>) -> T) -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/integerdescription",
                "title" : "NBK.IntegerDescription",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integersignmagnitude\/components",
                    "title" : "NBK.IntegerSignMagnitude.Components",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integersignmagnitude\/sign",
                    "title" : "NBK.IntegerSignMagnitude.Sign",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integersignmagnitude\/compare(_:to:using:)",
                    "title" : "static func compare<Other>(NBK.IntegerSignMagnitude<Magnitude>.Components, to: NBK.IntegerSignMagnitude<Other>.Components, using: (Magnitude, Other) -> Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integersignmagnitude\/islessthanzero(_:)",
                    "title" : "static func isLessThanZero(NBK.IntegerSignMagnitude<Magnitude>.Components) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integersignmagnitude\/ismorethanzero(_:)",
                    "title" : "static func isMoreThanZero(NBK.IntegerSignMagnitude<Magnitude>.Components) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integersignmagnitude\/signum(_:)",
                    "title" : "static func signum(NBK.IntegerSignMagnitude<Magnitude>.Components) -> Int",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/integersignmagnitude",
                "title" : "NBK.IntegerSignMagnitude",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/islessthanzero\/validate(_:)",
                    "title" : "static func validate(Value) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/islessthanzero",
                "title" : "NBK.IsLessThanZero",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/ismorethanzero\/validate(_:)",
                    "title" : "static func validate(Value) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/ismorethanzero",
                "title" : "NBK.IsMoreThanZero",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/isnot\/inverse",
                    "title" : "NBK.IsNot.Inverse",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/isnot\/validate(_:)",
                    "title" : "static func validate(Predicate.Value) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/isnot",
                "title" : "NBK.IsNot",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/ispowerof2\/validate(_:)",
                    "title" : "static func validate(Value) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/ispowerof2",
                "title" : "NBK.IsPowerOf2",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/iszero\/validate(_:)",
                    "title" : "static func validate(Value) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/iszero",
                "title" : "NBK.IsZero",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/iteration",
                        "title" : "var iteration: NBK.ProperBinaryInteger<Integer>.GreatestCommonDivisorByEuclideanAlgorithm<X, Y>.I",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/lhscoefficient",
                        "title" : "var lhsCoefficient: X",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/lhsquotient",
                        "title" : "var lhsQuotient: Y",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/result",
                        "title" : "var result: NBK.ProperBinaryInteger<Integer>.GreatestCommonDivisorByEuclideanAlgorithm<X, Y>.I",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/rhscoefficient",
                        "title" : "var rhsCoefficient: Y",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/rhsquotient",
                        "title" : "var rhsQuotient: X",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/i",
                        "title" : "NBK.ProperBinaryInteger.GreatestCommonDivisorByEuclideanAlgorithm.I",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/magnitude-2ako6",
                        "title" : "NBK.ProperBinaryInteger.GreatestCommonDivisorByEuclideanAlgorithm.Magnitude",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/magnitude-2mge5",
                        "title" : "NBK.ProperBinaryInteger.GreatestCommonDivisorByEuclideanAlgorithm.Magnitude",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/magnitude-4z3tm",
                        "title" : "NBK.ProperBinaryInteger.GreatestCommonDivisorByEuclideanAlgorithm.Magnitude",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm\/magnitude-8g3m3",
                        "title" : "NBK.ProperBinaryInteger.GreatestCommonDivisorByEuclideanAlgorithm.Magnitude",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm",
                    "title" : "NBK.ProperBinaryInteger.GreatestCommonDivisorByEuclideanAlgorithm",
                    "type" : "struct"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/magnitude",
                    "title" : "NBK.ProperBinaryInteger.Magnitude",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/dividing(_:by:)",
                    "title" : "static func dividing(NBK.ZeroOrMore<Integer>, by: NBK.PowerOf2<Integer>) -> QR<Integer, Integer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbybinaryalgorithm(of:and:)-3yzy1",
                    "title" : "static func greatestCommonDivisorByBinaryAlgorithm(of: Integer, and: Integer) -> Integer.Magnitude",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbybinaryalgorithm(of:and:)-48cqa",
                    "title" : "static func greatestCommonDivisorByBinaryAlgorithm(of: Integer, and: Integer) -> Integer",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm00(of:and:)-1r8gn",
                    "title" : "static func greatestCommonDivisorByEuclideanAlgorithm00(of: Integer, and: Integer) -> NBK.ProperBinaryInteger<Integer>.GreatestCommonDivisorByEuclideanAlgorithm<Void, Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm00(of:and:)-9vruz",
                    "title" : "static func greatestCommonDivisorByEuclideanAlgorithm00(of: Integer, and: Integer) -> NBK.ProperBinaryInteger<Integer>.GreatestCommonDivisorByEuclideanAlgorithm<Void, Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm01(of:and:)-4akek",
                    "title" : "static func greatestCommonDivisorByEuclideanAlgorithm01(of: Integer, and: Integer) -> NBK.ProperBinaryInteger<Integer>.GreatestCommonDivisorByEuclideanAlgorithm<Void, Integer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm01(of:and:)-70jrs",
                    "title" : "static func greatestCommonDivisorByEuclideanAlgorithm01(of: Integer, and: Integer) -> NBK.ProperBinaryInteger<Integer>.GreatestCommonDivisorByEuclideanAlgorithm<Void, Integer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm10(of:and:)-57yko",
                    "title" : "static func greatestCommonDivisorByEuclideanAlgorithm10(of: Integer, and: Integer) -> NBK.ProperBinaryInteger<Integer>.GreatestCommonDivisorByEuclideanAlgorithm<Integer, Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm10(of:and:)-nh1j",
                    "title" : "static func greatestCommonDivisorByEuclideanAlgorithm10(of: Integer, and: Integer) -> NBK.ProperBinaryInteger<Integer>.GreatestCommonDivisorByEuclideanAlgorithm<Integer, Void>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm11(of:and:)-13w2j",
                    "title" : "static func greatestCommonDivisorByEuclideanAlgorithm11(of: Integer, and: Integer) -> NBK.ProperBinaryInteger<Integer>.GreatestCommonDivisorByEuclideanAlgorithm<Integer, Integer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/greatestcommondivisorbyeuclideanalgorithm11(of:and:)-8q68o",
                    "title" : "static func greatestCommonDivisorByEuclideanAlgorithm11(of: Integer, and: Integer) -> NBK.ProperBinaryInteger<Integer>.GreatestCommonDivisorByEuclideanAlgorithm<Integer, Integer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/leastpositiveresidue(dividing:by:)-3dlf3",
                    "title" : "static func leastPositiveResidue<T>(dividing: T, by: NBK.NonZero<Integer>) -> Integer",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/leastpositiveresidue(dividing:by:)-5yhfa",
                    "title" : "static func leastPositiveResidue(dividing: some BinaryInteger, by: NBK.NonZero<Integer>) -> Integer",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/leastpositiveresidue(dividing:by:)-7chbf",
                    "title" : "static func leastPositiveResidue(dividing: some BinaryInteger, by: NBK.PowerOf2<Integer>) -> Integer",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/leastpositiveresiduereportingoverflow(dividing:by:)-4oxkw",
                    "title" : "static func leastPositiveResidueReportingOverflow(dividing: some BinaryInteger, by: Integer) -> PVO<Integer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/leastpositiveresiduereportingoverflow(dividing:by:)-rhai",
                    "title" : "static func leastPositiveResidueReportingOverflow(dividing: some BinaryInteger, by: Integer) -> PVO<Integer>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/modularmultiplicativeinverse(of:modulo:)",
                    "title" : "static func modularMultiplicativeInverse(of: Integer, modulo: Integer) -> Integer?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/modularmultiplicativeinverse(sign:magnitude:modulo:)",
                    "title" : "static func modularMultiplicativeInverse(sign: NBK.Sign, magnitude: Integer, modulo: Integer) -> Integer?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/quotient(dividing:by:)",
                    "title" : "static func quotient(dividing: NBK.ZeroOrMore<Integer>, by: NBK.PowerOf2<Integer>) -> Integer",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/remainder(dividing:by:)",
                    "title" : "static func remainder(dividing: NBK.ZeroOrMore<Integer>, by: NBK.PowerOf2<Integer>) -> Integer",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/squarerootbynewtonsmethod(of:)-6dvmw",
                    "title" : "static func squareRootByNewtonsMethod(of: Integer) -> Integer",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger\/squarerootbynewtonsmethod(of:)-94yto",
                    "title" : "static func squareRootByNewtonsMethod(of: Integer) -> Integer",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/properbinaryinteger",
                "title" : "NBK.ProperBinaryInteger",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/signed",
                    "title" : "NBK.StrictBinaryInteger.Signed",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/unsigned",
                    "title" : "NBK.StrictBinaryInteger.Unsigned",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftleft(_:environment:major:minoratleastone:)",
                    "title" : "static func bitShiftLeft(inout Base, environment: Base.Element, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftleft(_:environment:majoratleastone:)",
                    "title" : "static func bitShiftLeft(inout Base, environment: Base.Element, majorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftleftcodeblock(_:environment:major:minoratleastone:)",
                    "title" : "static func bitShiftLeftCodeBlock(inout Base, environment: Base.Element, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftright(_:environment:major:minoratleastone:)",
                    "title" : "static func bitShiftRight(inout Base, environment: Base.Element, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftright(_:environment:majoratleastone:)",
                    "title" : "static func bitShiftRight(inout Base, environment: Base.Element, majorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftrightcodeblock(_:environment:major:minoratleastone:)",
                    "title" : "static func bitShiftRightCodeBlock(inout Base, environment: Base.Element, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/formquotientwithremainderreportingoverflow(dividing:by:signedness:)",
                    "title" : "static func formQuotientWithRemainderReportingOverflow<Digit>(dividing: inout Base, by: Base.Element, signedness: Digit.Type) -> PVO<Base.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/withunsafebufferpointer(to:perform:)",
                    "title" : "static func withUnsafeBufferPointer<T, U>(to: T, perform: (Base) throws -> U) rethrows -> U",
                    "type" : "method"
                  },
                  {
                    "title" : "Enumerations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/signed",
                        "title" : "NBK.StrictBinaryInteger.SubSequence.Signed",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/unsigned",
                        "title" : "NBK.StrictBinaryInteger.SubSequence.Unsigned",
                        "type" : "typealias"
                      },
                      {
                        "title" : "Type Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/formonescomplement(_:)",
                        "title" : "static func formOnesComplement(inout Base)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/formtwoscomplement(_:)",
                        "title" : "static func formTwosComplement(inout Base)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/leadingzerobitcount(of:)",
                        "title" : "static func leadingZeroBitCount(of: Base) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/mostsignificantbit(twoscomplementof:)",
                        "title" : "static func mostSignificantBit(twosComplementOf: Base) -> Bool?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/nonzerobitcount(of:)",
                        "title" : "static func nonzeroBitCount(of: Base) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/nonzerobitcount(of:equals:)",
                        "title" : "static func nonzeroBitCount(of: Base, equals: Int) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/nonzerobitcount(twoscomplementof:)",
                        "title" : "static func nonzeroBitCount(twosComplementOf: Base) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/trailingzerobitcount(of:)",
                        "title" : "static func trailingZeroBitCount(of: Base) -> Int",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence",
                    "title" : "NBK.StrictBinaryInteger.SubSequence",
                    "type" : "enum"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger",
                "title" : "NBK.StrictBinaryInteger",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictsignmagnitude\/components",
                    "title" : "NBK.StrictSignMagnitude.Components",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictsignmagnitude\/sign",
                    "title" : "NBK.StrictSignMagnitude.Sign",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Enumerations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictsignmagnitude\/subsequence\/components",
                        "title" : "NBK.StrictSignMagnitude.SubSequence.Components",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictsignmagnitude\/subsequence\/sign",
                        "title" : "NBK.StrictSignMagnitude.SubSequence.Sign",
                        "type" : "typealias"
                      },
                      {
                        "title" : "Type Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictsignmagnitude\/subsequence\/islessthanzero(_:)",
                        "title" : "static func isLessThanZero(NBK.StrictSignMagnitude<Base>.SubSequence.Components) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictsignmagnitude\/subsequence\/ismorethanzero(_:)",
                        "title" : "static func isMoreThanZero(NBK.StrictSignMagnitude<Base>.SubSequence.Components) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictsignmagnitude\/subsequence\/signum(_:)",
                        "title" : "static func signum(NBK.StrictSignMagnitude<Base>.SubSequence.Components) -> Int",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/strictsignmagnitude\/subsequence",
                    "title" : "NBK.StrictSignMagnitude.SubSequence",
                    "type" : "enum"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/strictsignmagnitude",
                "title" : "NBK.StrictSignMagnitude",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/binary",
                    "title" : "NBK.StrictSignedInteger.Binary",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/unsigned",
                    "title" : "NBK.StrictSignedInteger.Unsigned",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/compare(_:to:)",
                    "title" : "static func compare(Base, to: some RandomAccessCollection<Base.Element>) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/compare(_:to:at:)",
                    "title" : "static func compare(Base, to: some RandomAccessCollection<Base.Element>, at: Base.Index) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Enumerations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/subsequence\/binary",
                        "title" : "NBK.StrictSignedInteger.SubSequence.Binary",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/subsequence\/unsigned",
                        "title" : "NBK.StrictSignedInteger.SubSequence.Unsigned",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/subsequence",
                    "title" : "NBK.StrictSignedInteger.SubSequence",
                    "type" : "enum"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger",
                "title" : "NBK.StrictSignedInteger",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/binary",
                    "title" : "NBK.StrictUnsignedInteger.Binary",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/signed",
                    "title" : "NBK.StrictUnsignedInteger.Signed",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftleft(_:by:)",
                    "title" : "static func bitShiftLeft(inout Base, by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftleft(_:major:)",
                    "title" : "static func bitShiftLeft(inout Base, major: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftleft(_:major:minor:)",
                    "title" : "static func bitShiftLeft(inout Base, major: Int, minor: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftleft(_:major:minoratleastone:)",
                    "title" : "static func bitShiftLeft(inout Base, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftleft(_:majoratleastone:)",
                    "title" : "static func bitShiftLeft(inout Base, majorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftright(_:by:)",
                    "title" : "static func bitShiftRight(inout Base, by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftright(_:major:)",
                    "title" : "static func bitShiftRight(inout Base, major: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftright(_:major:minor:)",
                    "title" : "static func bitShiftRight(inout Base, major: Int, minor: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftright(_:major:minoratleastone:)",
                    "title" : "static func bitShiftRight(inout Base, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftright(_:majoratleastone:)",
                    "title" : "static func bitShiftRight(inout Base, majorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/formremainderwithquotientbyonelongiteration2111msb(dividing:by:)",
                    "title" : "static func formRemainderWithQuotientByOneLongIteration2111MSB(dividing: inout Base, by: some RandomAccessCollection<Base.Element>) -> Base.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/initializetoquotientformremainderbylongalgorithm2111msb(_:dividing:by:)",
                    "title" : "static func initializeToQuotientFormRemainderByLongAlgorithm2111MSB<T>(inout Base, dividing: inout Base, by: UnsafeBufferPointer<T>)",
                    "type" : "method"
                  },
                  {
                    "title" : "Enumerations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/binary",
                        "title" : "NBK.StrictUnsignedInteger.SubSequence.Binary",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/signed",
                        "title" : "NBK.StrictUnsignedInteger.SubSequence.Signed",
                        "type" : "typealias"
                      },
                      {
                        "title" : "Type Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/compare(_:to:)",
                        "title" : "static func compare(Base, to: some RandomAccessCollection<Base.Element>) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/compare(_:to:at:)",
                        "title" : "static func compare(Base, to: some RandomAccessCollection<Base.Element>, at: Base.Index) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:)-2d4y9",
                        "title" : "static func decrement(inout Base, by: Bool) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:)-8hmby",
                        "title" : "static func decrement(inout Base, by: Base.Element) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:at:)-1mb78",
                        "title" : "static func decrement(inout Base, by: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:at:)-95tf",
                        "title" : "static func decrement(inout Base, by: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:plus:)-6ojdg",
                        "title" : "static func decrement(inout Base, by: Base.Element, plus: Bool) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:plus:)-98mda",
                        "title" : "static func decrement(inout Base, by: some Sequence<Base.Element>, plus: Bool) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:plus:at:)-257xs",
                        "title" : "static func decrement(inout Base, by: some Sequence<Base.Element>, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:plus:at:)-54k7b",
                        "title" : "static func decrement(inout Base, by: Base.Element, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:times:plus:)",
                        "title" : "static func decrement(inout Base, by: some Sequence<Base.Element>, times: Base.Element, plus: Base.Element) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:times:plus:at:)",
                        "title" : "static func decrement(inout Base, by: some Sequence<Base.Element>, times: Base.Element, plus: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:)",
                        "title" : "static func decrementInIntersection(inout Base, by: Base.Element) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:at:)",
                        "title" : "static func decrementInIntersection(inout Base, by: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:plus:)-6hiex",
                        "title" : "static func decrementInIntersection(inout Base, by: some Sequence<Base.Element>, plus: Bool) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:plus:)-cn5d",
                        "title" : "static func decrementInIntersection(inout Base, by: Base.Element, plus: Bool) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:plus:at:)-3t9co",
                        "title" : "static func decrementInIntersection(inout Base, by: some Sequence<Base.Element>, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:plus:at:)-4b6xv",
                        "title" : "static func decrementInIntersection(inout Base, by: Base.Element, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:times:plus:)",
                        "title" : "static func decrementInIntersection(inout Base, by: some Sequence<Base.Element>, times: Base.Element, plus: Base.Element) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:times:plus:at:)",
                        "title" : "static func decrementInIntersection(inout Base, by: some Sequence<Base.Element>, times: Base.Element, plus: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/formquotientwithremainder(dividing:by:)",
                        "title" : "static func formQuotientWithRemainder(dividing: inout Base, by: NBK.NonZero<Base.Element>) -> Base.Element",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/formquotientwithremainderreportingoverflow(dividing:by:)",
                        "title" : "static func formQuotientWithRemainderReportingOverflow(dividing: inout Base, by: Base.Element) -> PVO<Base.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/formtwoscomplementreportingoverflow(_:)",
                        "title" : "static func formTwosComplementReportingOverflow(inout Base) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/formtwoscomplementsubsequence(_:carry:)",
                        "title" : "static func formTwosComplementSubsequence(inout Base, carry: Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:)-3v2rp",
                        "title" : "static func increment(inout Base, by: Bool) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:)-529q4",
                        "title" : "static func increment(inout Base, by: Base.Element) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:at:)-58jmq",
                        "title" : "static func increment(inout Base, by: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:at:)-9j7e9",
                        "title" : "static func increment(inout Base, by: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:plus:)-6r1mj",
                        "title" : "static func increment(inout Base, by: some Sequence<Base.Element>, plus: Bool) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:plus:)-hsva",
                        "title" : "static func increment(inout Base, by: Base.Element, plus: Bool) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:plus:at:)-61qb6",
                        "title" : "static func increment(inout Base, by: Base.Element, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:plus:at:)-wea4",
                        "title" : "static func increment(inout Base, by: some Sequence<Base.Element>, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:times:plus:)",
                        "title" : "static func increment(inout Base, by: some Sequence<Base.Element>, times: Base.Element, plus: Base.Element) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:times:plus:at:)",
                        "title" : "static func increment(inout Base, by: some Sequence<Base.Element>, times: Base.Element, plus: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:)",
                        "title" : "static func incrementInIntersection(inout Base, by: Base.Element) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:at:)",
                        "title" : "static func incrementInIntersection(inout Base, by: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:plus:)-6smvz",
                        "title" : "static func incrementInIntersection(inout Base, by: some Sequence<Base.Element>, plus: Bool) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:plus:)-7k5rj",
                        "title" : "static func incrementInIntersection(inout Base, by: Base.Element, plus: Bool) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:plus:at:)-3fhj3",
                        "title" : "static func incrementInIntersection(inout Base, by: Base.Element, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:plus:at:)-5r0d2",
                        "title" : "static func incrementInIntersection(inout Base, by: some Sequence<Base.Element>, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:times:plus:)",
                        "title" : "static func incrementInIntersection(inout Base, by: some Sequence<Base.Element>, times: Base.Element, plus: Base.Element) -> IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:times:plus:at:)",
                        "title" : "static func incrementInIntersection(inout Base, by: some Sequence<Base.Element>, times: Base.Element, plus: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/initialize(_:to:times:)",
                        "title" : "static func initialize<T>(inout Base, to: UnsafeBufferPointer<UnsafeMutableBufferPointer<T>.Element>, times: UnsafeBufferPointer<UnsafeMutableBufferPointer<T>.Element>)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/initialize(_:tosquareproductof:)",
                        "title" : "static func initialize<T>(inout Base, toSquareProductOf: UnsafeBufferPointer<UnsafeMutableBufferPointer<T>.Element>)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/initializebykaratsubaalgorithm(_:to:times:)",
                        "title" : "static func initializeByKaratsubaAlgorithm<T>(inout Base, to: UnsafeBufferPointer<UnsafeMutableBufferPointer<T>.Element>, times: UnsafeBufferPointer<UnsafeMutableBufferPointer<T>.Element>)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/initializebykaratsubaalgorithm(_:tosquareproductof:)",
                        "title" : "static func initializeByKaratsubaAlgorithm<T>(inout Base, toSquareProductOf: UnsafeBufferPointer<UnsafeMutableBufferPointer<T>.Element>)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/initializebylongalgorithm(_:to:times:plus:)",
                        "title" : "static func initializeByLongAlgorithm<T>(inout Base, to: UnsafeBufferPointer<UnsafeMutableBufferPointer<T>.Element>, times: UnsafeBufferPointer<UnsafeMutableBufferPointer<T>.Element>, plus: UnsafeMutableBufferPointer<T>.Element)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/initializebylongalgorithm(_:tosquareproductof:plus:)",
                        "title" : "static func initializeByLongAlgorithm<T>(inout Base, toSquareProductOf: UnsafeBufferPointer<UnsafeMutableBufferPointer<T>.Element>, plus: UnsafeMutableBufferPointer<T>.Element)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/multiply(_:by:add:)",
                        "title" : "static func multiply(inout Base, by: Base.Element, add: Base.Element) -> Base.Element",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/multiply(_:by:add:from:to:)",
                        "title" : "static func multiply(inout Base, by: Base.Element, add: inout Base.Element, from: inout Base.Index, to: Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/partitiontrimmingredundantzeros(_:at:)",
                        "title" : "static func partitionTrimmingRedundantZeros<T>(Base, at: UnsafeBufferPointer<T>.Index) -> HL<Base, Base>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/remainder(dividing:by:)",
                        "title" : "static func remainder(dividing: Base, by: NBK.NonZero<Base.Element>) -> Base.Element",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/remainderreportingoverflow(dividing:by:)",
                        "title" : "static func remainderReportingOverflow(dividing: Base, by: Base.Element) -> PVO<Base.Element>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence",
                    "title" : "NBK.StrictUnsignedInteger.SubSequence",
                    "type" : "enum"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger",
                "title" : "NBK.StrictUnsignedInteger",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/magnitude",
                    "title" : "NBK.TupleBinaryInteger.Magnitude",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/wide1",
                    "title" : "NBK.TupleBinaryInteger.Wide1",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/wide2",
                    "title" : "NBK.TupleBinaryInteger.Wide2",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/wide3",
                    "title" : "NBK.TupleBinaryInteger.Wide3",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/compare22s(_:to:)",
                    "title" : "static func compare22S(NBK.TupleBinaryInteger<High>.Wide2, to: NBK.TupleBinaryInteger<High>.Wide2) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/compare33s(_:to:)",
                    "title" : "static func compare33S(NBK.TupleBinaryInteger<High>.Wide3, to: NBK.TupleBinaryInteger<High>.Wide3) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/decrement32b(_:by:)",
                    "title" : "static func decrement32B(inout NBK.TupleBinaryInteger<High>.Wide3, by: NBK.TupleBinaryInteger<High>.Wide2) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/decrement33b(_:by:)",
                    "title" : "static func decrement33B(inout NBK.TupleBinaryInteger<High>.Wide3, by: NBK.TupleBinaryInteger<High>.Wide3) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/formremainderwithquotient3212msbunchecked(dividing:by:)",
                    "title" : "static func formRemainderWithQuotient3212MSBUnchecked(dividing: inout NBK.TupleBinaryInteger<High>.Wide3, by: NBK.TupleBinaryInteger<High>.Wide2) -> High",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/increment32b(_:by:)",
                    "title" : "static func increment32B(inout NBK.TupleBinaryInteger<High>.Wide3, by: NBK.TupleBinaryInteger<High>.Wide2) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/increment33b(_:by:)",
                    "title" : "static func increment33B(inout NBK.TupleBinaryInteger<High>.Wide3, by: NBK.TupleBinaryInteger<High>.Wide3) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/magnitude(of:)",
                    "title" : "static func magnitude(of: NBK.TupleBinaryInteger<High>.Wide2) -> NBK.TupleBinaryInteger<High>.Magnitude.Wide2",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/multiplying213(_:by:)",
                    "title" : "static func multiplying213(NBK.TupleBinaryInteger<High>.Wide2, by: High) -> NBK.TupleBinaryInteger<High>.Wide3",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/prefix1(_:)",
                    "title" : "static func prefix1<Base>(Base) -> NBK.TupleBinaryInteger<High>.Wide1",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/prefix1(_:pushing:)",
                    "title" : "static func prefix1<Base>(Base, pushing: inout Base.Index) -> NBK.TupleBinaryInteger<High>.Wide1",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/prefix2(_:)",
                    "title" : "static func prefix2<Base>(Base) -> NBK.TupleBinaryInteger<High>.Wide2",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/prefix2(_:pushing:)",
                    "title" : "static func prefix2<Base>(Base, pushing: inout Base.Index) -> NBK.TupleBinaryInteger<High>.Wide2",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/prefix3(_:)",
                    "title" : "static func prefix3<Base>(Base) -> NBK.TupleBinaryInteger<High>.Wide3",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/prefix3(_:pushing:)",
                    "title" : "static func prefix3<Base>(Base, pushing: inout Base.Index) -> NBK.TupleBinaryInteger<High>.Wide3",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/suffix1(_:)",
                    "title" : "static func suffix1<Base>(Base) -> NBK.TupleBinaryInteger<High>.Wide1",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/suffix1(_:pulling:)",
                    "title" : "static func suffix1<Base>(Base, pulling: inout Base.Index) -> NBK.TupleBinaryInteger<High>.Wide1",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/suffix2(_:)",
                    "title" : "static func suffix2<Base>(Base) -> NBK.TupleBinaryInteger<High>.Wide2",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/suffix2(_:pulling:)",
                    "title" : "static func suffix2<Base>(Base, pulling: inout Base.Index) -> NBK.TupleBinaryInteger<High>.Wide2",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/suffix3(_:)",
                    "title" : "static func suffix3<Base>(Base) -> NBK.TupleBinaryInteger<High>.Wide3",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger\/suffix3(_:pulling:)",
                    "title" : "static func suffix3<Base>(Base, pulling: inout Base.Index) -> NBK.TupleBinaryInteger<High>.Wide3",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/tuplebinaryinteger",
                "title" : "NBK.TupleBinaryInteger",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/numberick\/nbk",
            "title" : "NBK",
            "type" : "enum"
          },
          {
            "title" : "Extended Modules",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Extended Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/\/(_:_:)-3rurj",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/\/(_:_:)-9l3ok",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/\/=(_:_:)-24bmt",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/\/=(_:_:)-8c56a",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/_(_:_:)-8vb1t",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/_(_:_:)-9d5ib",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/_=(_:_:)-8p955",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/_=(_:_:)-92xmw",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(_:)-3z77h",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(digit:)",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(magnitude:)",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(words:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(words:issigned:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/iseven",
                        "title" : "var isEven: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/isodd",
                        "title" : "var isOdd: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/description(radix:uppercase:)",
                        "title" : "func description(radix: Int, uppercase: Bool) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/formonescomplement()",
                        "title" : "func formOnesComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/formtwoscomplement()",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/formtwoscomplementreportingoverflow()",
                        "title" : "func formTwosComplementReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/formtwoscomplementsubsequence(_:)",
                        "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/onescomplement()",
                        "title" : "func onesComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/quotientandremainder(dividingby:)",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/twoscomplement()",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/twoscomplementreportingoverflow()",
                        "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/twoscomplementsubsequence(_:)",
                        "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/one",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int\/nbkbinaryinteger-implementations",
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(bitpattern:)-1oztf",
                        "title" : "init(bitPattern: Self.BitPattern)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(bitpattern:)-2vj1q",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/bitpattern-swift.property",
                        "title" : "var bitPattern: Self.BitPattern",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/bitpattern-swift.typealias",
                        "title" : "Int.BitPattern",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int\/nbkbitpatternconvertible-implementations",
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/dividereportingoverflow(by:)",
                        "title" : "func divideReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/formremainderreportingoverflow(dividingby:)",
                        "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/quotientandremainderreportingoverflow(dividingby:)",
                        "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int\/nbkcoreinteger-implementations",
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&*(_:_:)-49k0s",
                        "title" : "static func &* (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&*(_:_:)-4gmxl",
                        "title" : "static func &* (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&*=(_:_:)-6uadm",
                        "title" : "static func &*= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&*=(_:_:)-97fl6",
                        "title" : "static func &*= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&+(_:_:)-87i7g",
                        "title" : "static func &+ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&+(_:_:)-8msdn",
                        "title" : "static func &+ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&+=(_:_:)-2zus2",
                        "title" : "static func &+= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&+=(_:_:)-4xzm",
                        "title" : "static func &+= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&-(_:_:)-58tlu",
                        "title" : "static func &- (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&-(_:_:)-7x58h",
                        "title" : "static func &- (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&-=(_:_:)-6r4g9",
                        "title" : "static func &-= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/&-=(_:_:)-9x17r",
                        "title" : "static func &-= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/*(_:_:)-29s6w",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/*(_:_:)-8ewsb",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/*=(_:_:)-248f9",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/*=(_:_:)-5enit",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/+(_:_:)-4g3b0",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/+(_:_:)-7k3d6",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/+=(_:_:)-785qi",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/+=(_:_:)-9c4uz",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/-(_:_:)-31d9j",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/-(_:_:)-55f06",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/-=(_:_:)-13sj",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/-=(_:_:)-8uh9r",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(_:)-50nu2",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/init(repeating:)",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/bitshiftleft(by:)",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/bitshiftright(by:)",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/bitshiftedleft(by:)",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/bitshiftedright(by:)",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/dividingfullwidthreportingoverflow(_:)",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/negatereportingoverflow()",
                        "title" : "func negateReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/negatedreportingoverflow()",
                        "title" : "func negatedReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int\/nbkfixedwidthinteger-implementations",
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/-(_:)",
                        "title" : "static func - (Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/negate()",
                        "title" : "func negate()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int\/negated()",
                        "title" : "func negated() -> Self",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int\/nbksignedinteger-implementations",
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/int",
                "title" : "Int",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/\/(_:_:)-3bdpk",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/\/(_:_:)-6mats",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/\/=(_:_:)-4fhek",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/\/=(_:_:)-9ptnv",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/_(_:_:)-1f2jj",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/_(_:_:)-9pwx0",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/_=(_:_:)-3x55w",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/_=(_:_:)-9ipv9",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(_:)-19pre",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(digit:)",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(magnitude:)",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(words:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(words:issigned:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/iseven",
                        "title" : "var isEven: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/isodd",
                        "title" : "var isOdd: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/description(radix:uppercase:)",
                        "title" : "func description(radix: Int, uppercase: Bool) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/formonescomplement()",
                        "title" : "func formOnesComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/formtwoscomplement()",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/formtwoscomplementreportingoverflow()",
                        "title" : "func formTwosComplementReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/formtwoscomplementsubsequence(_:)",
                        "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/onescomplement()",
                        "title" : "func onesComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/quotientandremainder(dividingby:)",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/twoscomplement()",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/twoscomplementreportingoverflow()",
                        "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/twoscomplementsubsequence(_:)",
                        "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/one",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int16\/nbkbinaryinteger-implementations",
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(bitpattern:)-1bmi0",
                        "title" : "init(bitPattern: Self.BitPattern)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(bitpattern:)-246vl",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/bitpattern-swift.property",
                        "title" : "var bitPattern: Self.BitPattern",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/bitpattern-swift.typealias",
                        "title" : "Int16.BitPattern",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int16\/nbkbitpatternconvertible-implementations",
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/dividereportingoverflow(by:)",
                        "title" : "func divideReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/formremainderreportingoverflow(dividingby:)",
                        "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/quotientandremainderreportingoverflow(dividingby:)",
                        "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int16\/nbkcoreinteger-implementations",
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&*(_:_:)-1l9gb",
                        "title" : "static func &* (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&*(_:_:)-2kivj",
                        "title" : "static func &* (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&*=(_:_:)-23p3q",
                        "title" : "static func &*= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&*=(_:_:)-ha80",
                        "title" : "static func &*= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&+(_:_:)-51l4y",
                        "title" : "static func &+ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&+(_:_:)-9j0zl",
                        "title" : "static func &+ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&+=(_:_:)-5kkjw",
                        "title" : "static func &+= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&+=(_:_:)-9eahj",
                        "title" : "static func &+= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&-(_:_:)-2sv4u",
                        "title" : "static func &- (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&-(_:_:)-6a00j",
                        "title" : "static func &- (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&-=(_:_:)-1qild",
                        "title" : "static func &-= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/&-=(_:_:)-njg4",
                        "title" : "static func &-= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/*(_:_:)-4lxw8",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/*(_:_:)-5vch3",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/*=(_:_:)-1xgov",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/*=(_:_:)-8djcr",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/+(_:_:)-6yx0x",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/+(_:_:)-emqm",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/+=(_:_:)-4gk36",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/+=(_:_:)-95lz0",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/-(_:_:)-6hdy0",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/-(_:_:)-7yf8v",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/-=(_:_:)-5ipje",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/-=(_:_:)-66hn0",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(_:)-2dlw5",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/init(repeating:)",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/bitshiftleft(by:)",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/bitshiftright(by:)",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/bitshiftedleft(by:)",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/bitshiftedright(by:)",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/dividingfullwidthreportingoverflow(_:)",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/negatereportingoverflow()",
                        "title" : "func negateReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/negatedreportingoverflow()",
                        "title" : "func negatedReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int16\/nbkfixedwidthinteger-implementations",
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/-(_:)",
                        "title" : "static func - (Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/negate()",
                        "title" : "func negate()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int16\/negated()",
                        "title" : "func negated() -> Self",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int16\/nbksignedinteger-implementations",
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/int16",
                "title" : "Int16",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/\/(_:_:)-356ju",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/\/(_:_:)-6fys2",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/\/=(_:_:)-4867q",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/\/=(_:_:)-9x26h",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/_(_:_:)-1l9o5",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/_(_:_:)-9iocu",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/_=(_:_:)-3qt4e",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/_=(_:_:)-9qasv",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(_:)-1hap4",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(digit:)",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(magnitude:)",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(words:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(words:issigned:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/iseven",
                        "title" : "var isEven: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/isodd",
                        "title" : "var isOdd: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/description(radix:uppercase:)",
                        "title" : "func description(radix: Int, uppercase: Bool) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/formonescomplement()",
                        "title" : "func formOnesComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/formtwoscomplement()",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/formtwoscomplementreportingoverflow()",
                        "title" : "func formTwosComplementReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/formtwoscomplementsubsequence(_:)",
                        "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/onescomplement()",
                        "title" : "func onesComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/quotientandremainder(dividingby:)",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/twoscomplement()",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/twoscomplementreportingoverflow()",
                        "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/twoscomplementsubsequence(_:)",
                        "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/one",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int32\/nbkbinaryinteger-implementations",
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(bitpattern:)-1443u",
                        "title" : "init(bitPattern: Self.BitPattern)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(bitpattern:)-2brs3",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/bitpattern-swift.property",
                        "title" : "var bitPattern: Self.BitPattern",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/bitpattern-swift.typealias",
                        "title" : "Int32.BitPattern",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int32\/nbkbitpatternconvertible-implementations",
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/dividereportingoverflow(by:)",
                        "title" : "func divideReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/formremainderreportingoverflow(dividingby:)",
                        "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/quotientandremainderreportingoverflow(dividingby:)",
                        "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int32\/nbkcoreinteger-implementations",
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&*(_:_:)-1f261",
                        "title" : "static func &* (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&*(_:_:)-2rrhx",
                        "title" : "static func &* (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&*=(_:_:)-1xcx8",
                        "title" : "static func &*= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&*=(_:_:)-at5e",
                        "title" : "static func &*= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&+(_:_:)-4ua6o",
                        "title" : "static func &+ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&+(_:_:)-9coqr",
                        "title" : "static func &+ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&+=(_:_:)-5efty",
                        "title" : "static func &+= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&+=(_:_:)-9lqfx",
                        "title" : "static func &+= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&-(_:_:)-303x0",
                        "title" : "static func &- (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&-(_:_:)-62he9",
                        "title" : "static func &- (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&-=(_:_:)-1xr3n",
                        "title" : "static func &-= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/&-=(_:_:)-v21a",
                        "title" : "static func &-= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/*(_:_:)-4fgii",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/*(_:_:)-61r0t",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/*=(_:_:)-1q81h",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/*=(_:_:)-874nt",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/+(_:_:)-6sfs3",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/+(_:_:)-8aac",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/+=(_:_:)-4o2hs",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/+=(_:_:)-8y11i",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/-(_:_:)-6a596",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/-(_:_:)-85xth",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/-=(_:_:)-5q0eg",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/-=(_:_:)-6cto6",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(_:)-2k0pb",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/init(repeating:)",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/bitshiftleft(by:)",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/bitshiftright(by:)",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/bitshiftedleft(by:)",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/bitshiftedright(by:)",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/dividingfullwidthreportingoverflow(_:)",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/negatereportingoverflow()",
                        "title" : "func negateReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/negatedreportingoverflow()",
                        "title" : "func negatedReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int32\/nbkfixedwidthinteger-implementations",
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/-(_:)",
                        "title" : "static func - (Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/negate()",
                        "title" : "func negate()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int32\/negated()",
                        "title" : "func negated() -> Self",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int32\/nbksignedinteger-implementations",
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/int32",
                "title" : "Int32",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/\/(_:_:)-3flv5",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/\/(_:_:)-6wrel",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/\/=(_:_:)-4ilpp",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/\/=(_:_:)-9mo5u",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/_(_:_:)-14dbm",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/_(_:_:)-91lkt",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/_=(_:_:)-47lox",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/_=(_:_:)-98ajs",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(_:)-zad3",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(digit:)",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(magnitude:)",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(words:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(words:issigned:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/iseven",
                        "title" : "var isEven: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/isodd",
                        "title" : "var isOdd: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/description(radix:uppercase:)",
                        "title" : "func description(radix: Int, uppercase: Bool) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/formonescomplement()",
                        "title" : "func formOnesComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/formtwoscomplement()",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/formtwoscomplementreportingoverflow()",
                        "title" : "func formTwosComplementReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/formtwoscomplementsubsequence(_:)",
                        "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/onescomplement()",
                        "title" : "func onesComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/quotientandremainder(dividingby:)",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/twoscomplement()",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/twoscomplementreportingoverflow()",
                        "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/twoscomplementsubsequence(_:)",
                        "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/one",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int64\/nbkbinaryinteger-implementations",
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(bitpattern:)-1trjg",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(bitpattern:)-tonp",
                        "title" : "init(bitPattern: Self.BitPattern)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/bitpattern-swift.property",
                        "title" : "var bitPattern: Self.BitPattern",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/bitpattern-swift.typealias",
                        "title" : "Int64.BitPattern",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int64\/nbkbitpatternconvertible-implementations",
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/dividereportingoverflow(by:)",
                        "title" : "func divideReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/formremainderreportingoverflow(dividingby:)",
                        "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/quotientandremainderreportingoverflow(dividingby:)",
                        "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int64\/nbkcoreinteger-implementations",
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&*(_:_:)-1phdu",
                        "title" : "static func &* (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&*(_:_:)-2hd7a",
                        "title" : "static func &* (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&*=(_:_:)-2eflv",
                        "title" : "static func &*= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&*=(_:_:)-liih",
                        "title" : "static func &*= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&+(_:_:)-54pmz",
                        "title" : "static func &+ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&+(_:_:)-9thnw",
                        "title" : "static func &+ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&+=(_:_:)-2z8x",
                        "title" : "static func &+= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&+=(_:_:)-4w9c5",
                        "title" : "static func &+= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&-(_:_:)-3au8z",
                        "title" : "static func &- (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&-(_:_:)-5s20e",
                        "title" : "static func &- (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&-=(_:_:)-15ik9",
                        "title" : "static func &-= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/&-=(_:_:)-1nd3s",
                        "title" : "static func &-= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/*(_:_:)-4q5v5",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/*(_:_:)-5s6q6",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/*=(_:_:)-1gmje",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/*=(_:_:)-7p86i",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/+(_:_:)-7219k",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/+(_:_:)-pd0r",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/+=(_:_:)-4dee3",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/+=(_:_:)-98q8d",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/-(_:_:)-5zg51",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/-(_:_:)-8geci",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/-=(_:_:)-5941z",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/-=(_:_:)-6urql",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(_:)-2uhaw",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/init(repeating:)",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/bitshiftleft(by:)",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/bitshiftright(by:)",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/bitshiftedleft(by:)",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/bitshiftedright(by:)",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/dividingfullwidthreportingoverflow(_:)",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/negatereportingoverflow()",
                        "title" : "func negateReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/negatedreportingoverflow()",
                        "title" : "func negatedReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int64\/nbkfixedwidthinteger-implementations",
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/-(_:)",
                        "title" : "static func - (Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/negate()",
                        "title" : "func negate()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int64\/negated()",
                        "title" : "func negated() -> Self",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int64\/nbksignedinteger-implementations",
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/int64",
                "title" : "Int64",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/\/(_:_:)-6mjvx",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/\/(_:_:)-f2za",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/\/=(_:_:)-3w60k",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/\/=(_:_:)-84olz",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/_(_:_:)-2znuq",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/_(_:_:)-3ts2f",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/_=(_:_:)-5y7ua",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/_=(_:_:)-69ldn",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(_:)-6w200",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(digit:)",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(magnitude:)",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(words:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(words:issigned:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/iseven",
                        "title" : "var isEven: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/isodd",
                        "title" : "var isOdd: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/description(radix:uppercase:)",
                        "title" : "func description(radix: Int, uppercase: Bool) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/formonescomplement()",
                        "title" : "func formOnesComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/formtwoscomplement()",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/formtwoscomplementreportingoverflow()",
                        "title" : "func formTwosComplementReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/formtwoscomplementsubsequence(_:)",
                        "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/onescomplement()",
                        "title" : "func onesComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/quotientandremainder(dividingby:)",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/twoscomplement()",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/twoscomplementreportingoverflow()",
                        "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/twoscomplementsubsequence(_:)",
                        "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/one",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int8\/nbkbinaryinteger-implementations",
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(bitpattern:)-2i9jj",
                        "title" : "init(bitPattern: Self.BitPattern)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(bitpattern:)-8qdjb",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/bitpattern-swift.property",
                        "title" : "var bitPattern: Self.BitPattern",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/bitpattern-swift.typealias",
                        "title" : "Int8.BitPattern",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int8\/nbkbitpatternconvertible-implementations",
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/dividereportingoverflow(by:)",
                        "title" : "func divideReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/formremainderreportingoverflow(dividingby:)",
                        "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/quotientandremainderreportingoverflow(dividingby:)",
                        "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int8\/nbkcoreinteger-implementations",
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&*(_:_:)-8jlhh",
                        "title" : "static func &* (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&*(_:_:)-9wobg",
                        "title" : "static func &* (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&*=(_:_:)-2zwn2",
                        "title" : "static func &*= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&*=(_:_:)-3rnkf",
                        "title" : "static func &*= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&+(_:_:)-182oq",
                        "title" : "static func &+ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&+(_:_:)-wtbf",
                        "title" : "static func &+ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&+=(_:_:)-4ngho",
                        "title" : "static func &+= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&+=(_:_:)-60xmx",
                        "title" : "static func &+= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&-(_:_:)-22n5u",
                        "title" : "static func &- (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&-(_:_:)-947fw",
                        "title" : "static func &- (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&-=(_:_:)-5v785",
                        "title" : "static func &-= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/&-=(_:_:)-9koic",
                        "title" : "static func &-= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/*(_:_:)-2y7oh",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/*(_:_:)-6b1gh",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/*=(_:_:)-6u5rm",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/*=(_:_:)-8dt9n",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/+(_:_:)-3iv7x",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/+(_:_:)-3sran",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/+=(_:_:)-1fj2w",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/+=(_:_:)-66xjr",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/-(_:_:)-11t3s",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/-(_:_:)-5jxwp",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/-=(_:_:)-5quts",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/-=(_:_:)-8v7h7",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(_:)-9dr15",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/init(repeating:)",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/bitshiftleft(by:)",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/bitshiftright(by:)",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/bitshiftedleft(by:)",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/bitshiftedright(by:)",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/dividingfullwidthreportingoverflow(_:)",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/negatereportingoverflow()",
                        "title" : "func negateReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/negatedreportingoverflow()",
                        "title" : "func negatedReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int8\/nbkfixedwidthinteger-implementations",
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/-(_:)",
                        "title" : "static func - (Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/negate()",
                        "title" : "func negate()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/int8\/negated()",
                        "title" : "func negated() -> Self",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/int8\/nbksignedinteger-implementations",
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/int8",
                "title" : "Int8",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/swift\/string\/init(_:radix:uppercase:)",
                    "title" : "init(some NBKBinaryInteger, radix: Int, uppercase: Bool)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/string",
                "title" : "String",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/\/(_:_:)-3ruqr",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/\/(_:_:)-9l3p4",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/\/=(_:_:)-24bnd",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/\/=(_:_:)-8c566",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/_(_:_:)-8vb1p",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/_(_:_:)-9d5j3",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/_=(_:_:)-8p95h",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/_=(_:_:)-92xn8",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(_:)-3z76p",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(digit:)",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(magnitude:)",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(words:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(words:issigned:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/iseven",
                        "title" : "var isEven: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/isodd",
                        "title" : "var isOdd: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/description(radix:uppercase:)",
                        "title" : "func description(radix: Int, uppercase: Bool) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/formonescomplement()",
                        "title" : "func formOnesComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/formtwoscomplement()",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/formtwoscomplementreportingoverflow()",
                        "title" : "func formTwosComplementReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/formtwoscomplementsubsequence(_:)",
                        "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/onescomplement()",
                        "title" : "func onesComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/quotientandremainder(dividingby:)",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/twoscomplement()",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/twoscomplementreportingoverflow()",
                        "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/twoscomplementsubsequence(_:)",
                        "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/one",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint\/nbkbinaryinteger-implementations",
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(bitpattern:)-1oztb",
                        "title" : "init(bitPattern: Self.BitPattern)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(bitpattern:)-2vj1u",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/bitpattern-swift.property",
                        "title" : "var bitPattern: Self.BitPattern",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/bitpattern-swift.typealias",
                        "title" : "UInt.BitPattern",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint\/nbkbitpatternconvertible-implementations",
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/dividereportingoverflow(by:)",
                        "title" : "func divideReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/formremainderreportingoverflow(dividingby:)",
                        "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/quotientandremainderreportingoverflow(dividingby:)",
                        "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint\/nbkcoreinteger-implementations",
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&*(_:_:)-49k00",
                        "title" : "static func &* (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&*(_:_:)-4gmx1",
                        "title" : "static func &* (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&*=(_:_:)-6uady",
                        "title" : "static func &*= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&*=(_:_:)-97fli",
                        "title" : "static func &*= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&+(_:_:)-87i7k",
                        "title" : "static func &+ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&+(_:_:)-8msdz",
                        "title" : "static func &+ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&+=(_:_:)-2zury",
                        "title" : "static func &+= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&+=(_:_:)-4xzi",
                        "title" : "static func &+= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&-(_:_:)-58tmm",
                        "title" : "static func &- (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&-(_:_:)-7x599",
                        "title" : "static func &- (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&-=(_:_:)-6r4gl",
                        "title" : "static func &-= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/&-=(_:_:)-9x18b",
                        "title" : "static func &-= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/*(_:_:)-29s6c",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/*(_:_:)-8ewrr",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/*=(_:_:)-248ft",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/*=(_:_:)-5enih",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/+(_:_:)-4g3a8",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/+(_:_:)-7k3di",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/+=(_:_:)-785qu",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/+=(_:_:)-9c4uf",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/-(_:_:)-31da3",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/-(_:_:)-55ezu",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/-=(_:_:)-13sf",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/-=(_:_:)-8uh9v",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(_:)-50nue",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/init(repeating:)",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/bitshiftleft(by:)",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/bitshiftright(by:)",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/bitshiftedleft(by:)",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/bitshiftedright(by:)",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint\/dividingfullwidthreportingoverflow(_:)",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint\/nbkfixedwidthinteger-implementations",
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/uint",
                "title" : "UInt",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/\/(_:_:)-1mw84",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/\/(_:_:)-55mvf",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/\/=(_:_:)-37w1w",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/\/=(_:_:)-u6hn",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/_(_:_:)-91vty",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/_(_:_:)-yuq3",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/_=(_:_:)-1xvai",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/_=(_:_:)-5vil2",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(_:)-8i1lh",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(digit:)",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(magnitude:)",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(words:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(words:issigned:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/iseven",
                        "title" : "var isEven: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/isodd",
                        "title" : "var isOdd: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/description(radix:uppercase:)",
                        "title" : "func description(radix: Int, uppercase: Bool) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/formonescomplement()",
                        "title" : "func formOnesComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/formtwoscomplement()",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/formtwoscomplementreportingoverflow()",
                        "title" : "func formTwosComplementReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/formtwoscomplementsubsequence(_:)",
                        "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/onescomplement()",
                        "title" : "func onesComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/quotientandremainder(dividingby:)",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/twoscomplement()",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/twoscomplementreportingoverflow()",
                        "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/twoscomplementsubsequence(_:)",
                        "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/one",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint16\/nbkbinaryinteger-implementations",
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(bitpattern:)-6jr1j",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(bitpattern:)-7i559",
                        "title" : "init(bitPattern: Self.BitPattern)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/bitpattern-swift.property",
                        "title" : "var bitPattern: Self.BitPattern",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/bitpattern-swift.typealias",
                        "title" : "UInt16.BitPattern",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint16\/nbkbitpatternconvertible-implementations",
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/dividereportingoverflow(by:)",
                        "title" : "func divideReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/formremainderreportingoverflow(dividingby:)",
                        "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/quotientandremainderreportingoverflow(dividingby:)",
                        "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint16\/nbkcoreinteger-implementations",
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&*(_:_:)-2bcl7",
                        "title" : "static func &* (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&*(_:_:)-8ykca",
                        "title" : "static func &* (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&*=(_:_:)-7fowf",
                        "title" : "static func &*= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&*=(_:_:)-e0va",
                        "title" : "static func &*= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&+(_:_:)-6my7c",
                        "title" : "static func &+ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&+(_:_:)-7u8na",
                        "title" : "static func &+ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&+=(_:_:)-4h7tc",
                        "title" : "static func &+= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&+=(_:_:)-5kfow",
                        "title" : "static func &+= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&-(_:_:)-34voe",
                        "title" : "static func &- (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&-(_:_:)-6jpku",
                        "title" : "static func &- (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&-=(_:_:)-1vm3e",
                        "title" : "static func &-= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/&-=(_:_:)-963pv",
                        "title" : "static func &-= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/*(_:_:)-6bgf8",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/*(_:_:)-9823l",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/*=(_:_:)-84vgn",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/*=(_:_:)-9ohoi",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/+(_:_:)-6vzp",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/+(_:_:)-8yxxf",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/+=(_:_:)-1c3cv",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/+=(_:_:)-8msj4",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/-(_:_:)-1h1bi",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/-(_:_:)-8gw42",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/-=(_:_:)-1j0c6",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/-=(_:_:)-6kygs",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(_:)-89xsn",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/init(repeating:)",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/bitshiftleft(by:)",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/bitshiftright(by:)",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/bitshiftedleft(by:)",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/bitshiftedright(by:)",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint16\/dividingfullwidthreportingoverflow(_:)",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint16\/nbkfixedwidthinteger-implementations",
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/uint16",
                "title" : "UInt16",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/\/(_:_:)-1fdu6",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/\/(_:_:)-5d5bd",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/\/=(_:_:)-10ird",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/\/=(_:_:)-3feou",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/_(_:_:)-98cyk",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/_(_:_:)-sdft",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/_=(_:_:)-1rgjs",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/_=(_:_:)-5pb3w",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(_:)-8aqin",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(digit:)",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(magnitude:)",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(words:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(words:issigned:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/iseven",
                        "title" : "var isEven: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/isodd",
                        "title" : "var isOdd: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/description(radix:uppercase:)",
                        "title" : "func description(radix: Int, uppercase: Bool) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/formonescomplement()",
                        "title" : "func formOnesComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/formtwoscomplement()",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/formtwoscomplementreportingoverflow()",
                        "title" : "func formTwosComplementReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/formtwoscomplementsubsequence(_:)",
                        "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/onescomplement()",
                        "title" : "func onesComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/quotientandremainder(dividingby:)",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/twoscomplement()",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/twoscomplementreportingoverflow()",
                        "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/twoscomplementsubsequence(_:)",
                        "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/one",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint32\/nbkbinaryinteger-implementations",
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(bitpattern:)-6cg6l",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(bitpattern:)-7aozr",
                        "title" : "init(bitPattern: Self.BitPattern)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/bitpattern-swift.property",
                        "title" : "var bitPattern: Self.BitPattern",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/bitpattern-swift.typealias",
                        "title" : "UInt32.BitPattern",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint32\/nbkbitpatternconvertible-implementations",
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/dividereportingoverflow(by:)",
                        "title" : "func divideReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/formremainderreportingoverflow(dividingby:)",
                        "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/quotientandremainderreportingoverflow(dividingby:)",
                        "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint32\/nbkcoreinteger-implementations",
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&*(_:_:)-2ispl",
                        "title" : "static func &* (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&*(_:_:)-962xk",
                        "title" : "static func &* (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&*=(_:_:)-79jxh",
                        "title" : "static func &*= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&*=(_:_:)-k5e4",
                        "title" : "static func &*= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&+(_:_:)-6ugsq",
                        "title" : "static func &+ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&+(_:_:)-7ntyk",
                        "title" : "static func &+ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&+=(_:_:)-4ogaq",
                        "title" : "static func &+= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&+=(_:_:)-5qww2",
                        "title" : "static func &+= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&-(_:_:)-2xmvo",
                        "title" : "static func &- (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&-(_:_:)-6c9mc",
                        "title" : "static func &- (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&-=(_:_:)-21y60",
                        "title" : "static func &-= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/&-=(_:_:)-8yl35",
                        "title" : "static func &-= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/*(_:_:)-6hl5a",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/*(_:_:)-9eecz",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/*=(_:_:)-7xfil",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/*=(_:_:)-9uots",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/+(_:_:)-8rpi9",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/+(_:_:)-e4ov",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/+=(_:_:)-1jc39",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/+=(_:_:)-8u8g2",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/-(_:_:)-19ivo",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/-(_:_:)-8ajo0",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/-=(_:_:)-1qit8",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/-=(_:_:)-6eh46",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(_:)-83iy5",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/init(repeating:)",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/bitshiftleft(by:)",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/bitshiftright(by:)",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/bitshiftedleft(by:)",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/bitshiftedright(by:)",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint32\/dividingfullwidthreportingoverflow(_:)",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint32\/nbkfixedwidthinteger-implementations",
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/uint32",
                "title" : "UInt32",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/\/(_:_:)-14ydt",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/\/(_:_:)-5nlza",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/\/=(_:_:)-1igl6",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/\/=(_:_:)-3pv61",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/_(_:_:)-132ma",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/_(_:_:)-8rgm3",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/_=(_:_:)-1h187",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/_=(_:_:)-5zqiv",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(_:)-8l5wk",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(digit:)",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(magnitude:)",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(words:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(words:issigned:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/iseven",
                        "title" : "var isEven: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/isodd",
                        "title" : "var isOdd: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/description(radix:uppercase:)",
                        "title" : "func description(radix: Int, uppercase: Bool) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/formonescomplement()",
                        "title" : "func formOnesComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/formtwoscomplement()",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/formtwoscomplementreportingoverflow()",
                        "title" : "func formTwosComplementReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/formtwoscomplementsubsequence(_:)",
                        "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/onescomplement()",
                        "title" : "func onesComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/quotientandremainder(dividingby:)",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/twoscomplement()",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/twoscomplementreportingoverflow()",
                        "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/twoscomplementsubsequence(_:)",
                        "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/one",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint64\/nbkbinaryinteger-implementations",
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(bitpattern:)-6mvbq",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(bitpattern:)-7rrvc",
                        "title" : "init(bitPattern: Self.BitPattern)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/bitpattern-swift.property",
                        "title" : "var bitPattern: Self.BitPattern",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/bitpattern-swift.typealias",
                        "title" : "UInt64.BitPattern",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint64\/nbkbitpatternconvertible-implementations",
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/dividereportingoverflow(by:)",
                        "title" : "func divideReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/formremainderreportingoverflow(dividingby:)",
                        "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/quotientandremainderreportingoverflow(dividingby:)",
                        "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint64\/nbkcoreinteger-implementations",
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&*(_:_:)-2zmvu",
                        "title" : "static func &* (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&*(_:_:)-9gjg7",
                        "title" : "static func &* (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&*=(_:_:)-6yuqy",
                        "title" : "static func &*= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&*=(_:_:)-uw0r",
                        "title" : "static func &*= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&+(_:_:)-74xb9",
                        "title" : "static func &+ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&+(_:_:)-7dedv",
                        "title" : "static func &+ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&+=(_:_:)-4e24p",
                        "title" : "static func &+= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&+=(_:_:)-5a0gd",
                        "title" : "static func &+= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&-(_:_:)-2gk6v",
                        "title" : "static func &- (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&-(_:_:)-6tcaz",
                        "title" : "static func &- (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&-=(_:_:)-2jw6z",
                        "title" : "static func &-= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/&-=(_:_:)-8hsci",
                        "title" : "static func &-= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/*(_:_:)-6sbrt",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/*(_:_:)-9wc5c",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/*=(_:_:)-8fc6q",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/*=(_:_:)-9dsgf",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/+(_:_:)-8i41a",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/+(_:_:)-ov3c",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/+=(_:_:)-1u2f6",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/+=(_:_:)-9b2j5",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/-(_:_:)-8rclb",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/-(_:_:)-spyv",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/-=(_:_:)-1fusf",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/-=(_:_:)-6o2lp",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(_:)-7lmgu",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/init(repeating:)",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/bitshiftleft(by:)",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/bitshiftright(by:)",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/bitshiftedleft(by:)",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/bitshiftedright(by:)",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint64\/dividingfullwidthreportingoverflow(_:)",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint64\/nbkfixedwidthinteger-implementations",
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/uint64",
                "title" : "UInt64",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/\/(_:_:)-2wblq",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/\/(_:_:)-bpga",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/\/=(_:_:)-3wub9",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/\/=(_:_:)-8o1av",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/_(_:_:)-4vn33",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/_(_:_:)-5ix70",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/_=(_:_:)-2xje2",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/_=(_:_:)-5scqh",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(_:)-599bw",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(digit:)",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(magnitude:)",
                        "title" : "init?(magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(words:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(words:issigned:)",
                        "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/iseven",
                        "title" : "var isEven: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/isodd",
                        "title" : "var isOdd: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/description(radix:uppercase:)",
                        "title" : "func description(radix: Int, uppercase: Bool) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/formonescomplement()",
                        "title" : "func formOnesComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/formtwoscomplement()",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/formtwoscomplementreportingoverflow()",
                        "title" : "func formTwosComplementReportingOverflow() -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/formtwoscomplementsubsequence(_:)",
                        "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/onescomplement()",
                        "title" : "func onesComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/quotientandremainder(dividingby:)",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/twoscomplement()",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/twoscomplementreportingoverflow()",
                        "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/twoscomplementsubsequence(_:)",
                        "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/one",
                        "title" : "static var one: Self",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint8\/nbkbinaryinteger-implementations",
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(bitpattern:)-1hv30",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(bitpattern:)-9rxuj",
                        "title" : "init(bitPattern: Self.BitPattern)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/bitpattern-swift.property",
                        "title" : "var bitPattern: Self.BitPattern",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/bitpattern-swift.typealias",
                        "title" : "UInt8.BitPattern",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint8\/nbkbitpatternconvertible-implementations",
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/dividereportingoverflow(by:)",
                        "title" : "func divideReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/formremainderreportingoverflow(dividingby:)",
                        "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/quotientandremainderreportingoverflow(dividingby:)",
                        "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint8\/nbkcoreinteger-implementations",
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&*(_:_:)-51taq",
                        "title" : "static func &* (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&*(_:_:)-8l6c6",
                        "title" : "static func &* (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&*=(_:_:)-1a8ev",
                        "title" : "static func &*= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&*=(_:_:)-7q1t0",
                        "title" : "static func &*= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&+(_:_:)-4gc3e",
                        "title" : "static func &+ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&+(_:_:)-65g5y",
                        "title" : "static func &+ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&+=(_:_:)-2x5j4",
                        "title" : "static func &+= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&+=(_:_:)-8f3",
                        "title" : "static func &+= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&-(_:_:)-4qq2b",
                        "title" : "static func &- (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&-(_:_:)-9v320",
                        "title" : "static func &- (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&-=(_:_:)-1ai7l",
                        "title" : "static func &-= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/&-=(_:_:)-1ehyw",
                        "title" : "static func &-= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/*(_:_:)-1v3sf",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/*(_:_:)-7qgo6",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/*=(_:_:)-2g10q",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/*=(_:_:)-7y519",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/+(_:_:)-3f1hs",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/+(_:_:)-5y1qm",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/+=(_:_:)-6ukyc",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/+=(_:_:)-9v7v7",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/-(_:_:)-3bnk9",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/-(_:_:)-8n4lp",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/-=(_:_:)-80c8c",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/-=(_:_:)-9o46m",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(_:)-5npi0",
                        "title" : "init?(String)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/init(repeating:)",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/bitshiftleft(by:)",
                        "title" : "func bitShiftLeft(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/bitshiftright(by:)",
                        "title" : "func bitShiftRight(by: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/bitshiftedleft(by:)",
                        "title" : "func bitShiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/bitshiftedright(by:)",
                        "title" : "func bitShiftedRight(by: Int) -> Self",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/swift\/uint8\/dividingfullwidthreportingoverflow(_:)",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/swift\/uint8\/nbkfixedwidthinteger-implementations",
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/numberick\/swift\/uint8",
                "title" : "UInt8",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/numberick\/swift",
            "title" : "Swift",
            "type" : "extension"
          }
        ],
        "path" : "\/documentation\/numberick",
        "title" : "Numberick",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 1
  }
}