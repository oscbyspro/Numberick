{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/*(_:_:)-b5dc",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/*(_:_:)-53xcf",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*(_:_:)-44lgr",
                "title" : "static func * (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/*(_:_:)-53xcf",
                        "title" : "static func * (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/*(_:_:)-b5dc",
                        "title" : "static func * (Self, Self.Digit) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*(_:_:)-6b5t5",
                "title" : "static func * (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/*=(_:_:)-3tidt",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/*=(_:_:)-1w6iv",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*=(_:_:)-8l5rb",
                "title" : "static func *= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/*=(_:_:)-1w6iv",
                        "title" : "static func *= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/*=(_:_:)-3tidt",
                        "title" : "static func *= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/*=(_:_:)-9eehz",
                "title" : "static func *= (inout Self, Self)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/+(_:_:)-9ygmi",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/+(_:_:)-4wjjr",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+(_:_:)-22nkj",
                "title" : "static func + (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/+(_:_:)-9ygmi",
                        "title" : "static func + (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/+(_:_:)-4wjjr",
                        "title" : "static func + (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+(_:_:)-5wkzf",
                "title" : "static func + (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/+=(_:_:)-1cwri",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/+=(_:_:)-1hnfr",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+=(_:_:)-75nkk",
                "title" : "static func += (inout Self, Self)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/+=(_:_:)-1cwri",
                        "title" : "static func += (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/+=(_:_:)-1hnfr",
                        "title" : "static func += (inout Self, Self.Digit)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/+=(_:_:)-fnm2",
                "title" : "static func += (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/-(_:_:)-6a96v",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/-(_:_:)-7p5xj",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-(_:_:)-1308t",
                "title" : "static func - (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/-(_:_:)-6a96v",
                        "title" : "static func - (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/-(_:_:)-7p5xj",
                        "title" : "static func - (Self, Self.Digit) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-(_:_:)-2q5if",
                "title" : "static func - (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/-=(_:_:)-pept",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/-=(_:_:)-100ot",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-=(_:_:)-49upm",
                "title" : "static func -= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/-=(_:_:)-100ot",
                        "title" : "static func -= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/-=(_:_:)-pept",
                        "title" : "static func -= (inout Self, Self.Digit)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/-=(_:_:)-jn00",
                "title" : "static func -= (inout Self, Self)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-99oep",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-2b670",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-26jfz",
                "title" : "static func \/ (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-2b670",
                        "title" : "static func \/ (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-99oep",
                        "title" : "static func \/ (Self, Self.Digit) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/(_:_:)-4dop5",
                "title" : "static func \/ (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-6vqkl",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-6h1fg",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-14uup",
                "title" : "static func \/= (inout Self, Self)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-6vqkl",
                        "title" : "static func \/= (inout Self, Self.Digit)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-6h1fg",
                        "title" : "static func \/= (inout Self, Self)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/\/=(_:_:)-81hog",
                "title" : "static func \/= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-7su4o",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-557x1",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-1skxt",
                "title" : "static func % (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-557x1",
                        "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-7su4o",
                        "title" : "static func % (Self, Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_(_:_:)-7h704",
                "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-2zw2k",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-1uu5b",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-2kjsu",
                "title" : "static func %= (inout Self, Self)",
                "type" : "op"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-2zw2k",
                        "title" : "static func %= (inout Self, Self)",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-1uu5b",
                        "title" : "static func %= (inout Self, Self.Digit)",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/_=(_:_:)-9yvxp",
                "title" : "static func %= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/digit",
                "title" : "Digit",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(_:)-8j2y7",
                        "title" : "init?(String)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/init(_:)",
                        "title" : "init?(String)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(_:)-9p8eg",
                "title" : "init?(String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(_:radix:)",
                "title" : "init?(some StringProtocol, radix: Int)",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/init(bit:)",
                        "title" : "init(bit: Bool)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(bit:)",
                "title" : "init(bit: Bool)",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(digit:)-9scf6",
                        "title" : "init(digit: Self.Digit)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(digit:)-2f5it",
                "title" : "init(digit: Self.Digit)",
                "type" : "init"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/init(sign:magnitude:)",
                        "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(sign:magnitude:)",
                "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(words:)",
                "title" : "init?(words: some RandomAccessCollection<UInt>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/init(words:issigned:)",
                "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/bitwidth",
                "title" : "var bitWidth: Int",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/description-5nbl3",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/description-2oong",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/iseven",
                "title" : "var isEven: Bool",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/islessthanzero",
                        "title" : "var isLessThanZero: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/islessthanzero",
                "title" : "var isLessThanZero: Bool",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/ismorethanzero",
                        "title" : "var isMoreThanZero: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/ismorethanzero",
                "title" : "var isMoreThanZero: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/isodd",
                "title" : "var isOdd: Bool",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/ispowerof2",
                        "title" : "var isPowerOf2: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/ispowerof2",
                "title" : "var isPowerOf2: Bool",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/iszero",
                        "title" : "var isZero: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/iszero",
                "title" : "var isZero: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/leadingzerobitcount",
                "title" : "var leadingZeroBitCount: Int",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/leastsignificantbit",
                        "title" : "var leastSignificantBit: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/leastsignificantbit",
                "title" : "var leastSignificantBit: Bool",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/mostsignificantbit",
                        "title" : "var mostSignificantBit: Bool",
                        "type" : "property"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/mostsignificantbit",
                "title" : "var mostSignificantBit: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/nonzerobitcount",
                "title" : "var nonzeroBitCount: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/trailingzerobitcount",
                "title" : "var trailingZeroBitCount: Int",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/compared(to:)-14vgb",
                "title" : "func compared(to: Self.Digit) -> Int",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/compared(to:)",
                        "title" : "func compared(to: Self) -> Int",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/compared(to:)-an0k",
                "title" : "func compared(to: Self) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/description(radix:uppercase:)",
                "title" : "func description(radix: Int, uppercase: Bool) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/dividereportingoverflow(by:)-7p397",
                "title" : "func divideReportingOverflow(by: Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/dividereportingoverflow(by:)-9owka",
                "title" : "func divideReportingOverflow(by: Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/dividedreportingoverflow(by:)-53rf6",
                "title" : "func dividedReportingOverflow(by: Self.Digit) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/dividedreportingoverflow(by:)-9cvzj",
                "title" : "func dividedReportingOverflow(by: Self) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formonescomplement()",
                "title" : "func formOnesComplement()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formremainderreportingoverflow(dividingby:)-4h8o0",
                "title" : "func formRemainderReportingOverflow(dividingBy: Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formremainderreportingoverflow(dividingby:)-4ov9t",
                "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formtwoscomplement()-5ibo9",
                        "title" : "func formTwosComplement()",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formtwoscomplement()-5ojn1",
                "title" : "func formTwosComplement()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formtwoscomplementreportingoverflow()",
                "title" : "func formTwosComplementReportingOverflow() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/formtwoscomplementsubsequence(_:)",
                "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/onescomplement()",
                "title" : "func onesComplement() -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-4qhwl",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-3ep4z",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-2rocc",
                        "title" : "func quotientAndRemainder(dividingBy: Self.Digit) -> QR<Self, Self.Digit>",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-4m3g0",
                "title" : "func quotientAndRemainder(dividingBy: Self.Digit) -> QR<Self, Self.Digit>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-3ep4z",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-4qhwl",
                        "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-2rocc",
                        "title" : "func quotientAndRemainder(dividingBy: Self.Digit) -> QR<Self, Self.Digit>",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainder(dividingby:)-75xeo",
                "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainderreportingoverflow(dividingby:)-5rdpc",
                "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self.Digit) -> PVO<QR<Self, Self.Digit>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/quotientandremainderreportingoverflow(dividingby:)-8vjq7",
                "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/remainderreportingoverflow(dividingby:)-3q18l",
                "title" : "func remainderReportingOverflow(dividingBy: Self.Digit) -> PVO<Self.Digit>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/remainderreportingoverflow(dividingby:)-45jzw",
                "title" : "func remainderReportingOverflow(dividingBy: Self) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/signum()",
                "title" : "func signum() -> Int",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbinaryinteger\/twoscomplement()-82fzz",
                        "title" : "func twosComplement() -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKBinaryInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/twoscomplement()-dy1a",
                "title" : "func twosComplement() -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/twoscomplementreportingoverflow()",
                "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbinaryinteger\/twoscomplementsubsequence(_:)",
                "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkbinaryinteger",
            "title" : "NBKBinaryInteger",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbitpatternconvertible\/bitpattern-swift.associatedtype",
                "title" : "BitPattern",
                "type" : "associatedtype"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkbitpatternconvertible\/init(bitpattern:)-y5zj",
                        "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKBitPatternConvertible Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkbitpatternconvertible\/init(bitpattern:)-9jl80",
                "title" : "init(bitPattern: Self.BitPattern)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkbitpatternconvertible\/bitpattern-swift.property",
                "title" : "var bitPattern: Self.BitPattern",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkbitpatternconvertible",
            "title" : "NBKBitPatternConvertible",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/dividereportingoverflow(by:)",
                "title" : "func divideReportingOverflow(by: Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/formremainderreportingoverflow(dividingby:)",
                "title" : "func formRemainderReportingOverflow(dividingBy: Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/quotientandremainderreportingoverflow(dividingby:)",
                "title" : "func quotientAndRemainderReportingOverflow(dividingBy: Self) -> PVO<QR<Self, Self>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/signum()",
                "title" : "func signum() -> Int",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/init(words:)",
                    "title" : "init?(words: some RandomAccessCollection<UInt>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/init(words:issigned:)",
                    "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/formonescomplement()",
                    "title" : "func formOnesComplement()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/formtwoscomplementreportingoverflow()",
                    "title" : "func formTwosComplementReportingOverflow() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/formtwoscomplementsubsequence(_:)",
                    "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/onescomplement()",
                    "title" : "func onesComplement() -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/twoscomplementreportingoverflow()",
                    "title" : "func twosComplementReportingOverflow() -> PVO<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/twoscomplementsubsequence(_:)",
                    "title" : "func twosComplementSubsequence(Bool) -> PVO<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/nbkbinaryinteger-implementations",
                "title" : "NBKBinaryInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/init(bitpattern:)",
                    "title" : "init(bitPattern: Self.BitPattern)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkcoreinteger\/bitpattern",
                    "title" : "var bitPattern: Self.BitPattern",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkcoreinteger\/nbkbitpatternconvertible-implementations",
                "title" : "NBKBitPatternConvertible Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkcoreinteger",
            "title" : "NBKCoreInteger",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&*(_:_:)-33382",
                "title" : "static func &* (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&*(_:_:)-7nrni",
                "title" : "static func &* (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&*=(_:_:)-5ncdy",
                "title" : "static func &*= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&*=(_:_:)-71zes",
                "title" : "static func &*= (inout Self, Self)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&+(_:_:)-620iz",
                "title" : "static func &+ (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&+(_:_:)-75xwb",
                "title" : "static func &+ (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&+=(_:_:)-25vws",
                "title" : "static func &+= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&+=(_:_:)-9ft2m",
                "title" : "static func &+= (inout Self, Self)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&-(_:_:)-6ewyg",
                "title" : "static func &- (Self, Self) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&-(_:_:)-8r1yl",
                "title" : "static func &- (Self, Self.Digit) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&-=(_:_:)-2fxk3",
                "title" : "static func &-= (inout Self, Self.Digit)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/&-=(_:_:)-9apxb",
                "title" : "static func &-= (inout Self, Self)",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/init(repeating:)-45js7",
                        "title" : "init(repeating: Bool)",
                        "type" : "init"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/init(repeating:)-9paxb",
                "title" : "init(repeating: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkcoreinteger\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/addreportingoverflow(_:)-3sbvr",
                "title" : "func addReportingOverflow(Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkcoreinteger\/addreportingoverflow(_:)",
                        "title" : "func addReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/addreportingoverflow(_:)-7k5cn",
                "title" : "func addReportingOverflow(Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/addingreportingoverflow(_:)-6li79",
                "title" : "func addingReportingOverflow(Self.Digit) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/addingreportingoverflow(_:)-9h7a0",
                "title" : "func addingReportingOverflow(Self) -> PVO<Self>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitrotateleft(by:)-8nenm",
                        "title" : "func bitrotateLeft(by: Int)",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitrotateleft(by:)-17ha6",
                "title" : "func bitrotateLeft(by: Int)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitrotateright(by:)-iqd0",
                        "title" : "func bitrotateRight(by: Int)",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitrotateright(by:)-7fez4",
                "title" : "func bitrotateRight(by: Int)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitrotatedleft(by:)-261ok",
                        "title" : "func bitrotatedLeft(by: Int) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitrotatedleft(by:)-5rnqr",
                "title" : "func bitrotatedLeft(by: Int) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitrotatedright(by:)-35n41",
                        "title" : "func bitrotatedRight(by: Int) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitrotatedright(by:)-7ln1o",
                "title" : "func bitrotatedRight(by: Int) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftleft(by:)-3faw9",
                        "title" : "func bitshiftLeft(by: Int)",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftleft(by:)-5feqy",
                "title" : "func bitshiftLeft(by: Int)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftright(by:)-8gv7",
                        "title" : "func bitshiftRight(by: Int)",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftright(by:)-6uz0n",
                "title" : "func bitshiftRight(by: Int)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftedleft(by:)-2n27o",
                        "title" : "func bitshiftedLeft(by: Int) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftedleft(by:)-5fv7o",
                "title" : "func bitshiftedLeft(by: Int) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftedright(by:)-96kcl",
                        "title" : "func bitshiftedRight(by: Int) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKFixedWidthInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/bitshiftedright(by:)-1rl8t",
                "title" : "func bitshiftedRight(by: Int) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/dividingfullwidth(_:)",
                "title" : "func dividingFullWidth(HL<Self, Self.Magnitude>) -> QR<Self, Self>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkcoreinteger\/dividingfullwidthreportingoverflow(_:)-6na1u",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbkcoreinteger\/dividingfullwidthreportingoverflow(_:)-2geg8",
                        "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/dividingfullwidthreportingoverflow(_:)",
                "title" : "func dividingFullWidthReportingOverflow(HL<Self, Self.Magnitude>) -> PVO<QR<Self, Self>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multipliedfullwidth(by:)-60fsq",
                "title" : "func multipliedFullWidth(by: Self) -> HL<Self, Self.Magnitude>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multipliedfullwidth(by:)-6n7wq",
                "title" : "func multipliedFullWidth(by: Self.Digit) -> HL<Self.Digit, Self.Magnitude>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multipliedreportingoverflow(by:)-2h3ls",
                "title" : "func multipliedReportingOverflow(by: Self.Digit) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multipliedreportingoverflow(by:)-3769p",
                "title" : "func multipliedReportingOverflow(by: Self) -> PVO<Self>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkcoreinteger\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyfullwidth(by:)-71cnq",
                "title" : "func multiplyFullWidth(by: Self.Digit) -> Self.Digit",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkcoreinteger\/multiplyfullwidth(by:)",
                        "title" : "func multiplyFullWidth(by: Self) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyfullwidth(by:)-7kwsk",
                "title" : "func multiplyFullWidth(by: Self) -> Self",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkcoreinteger\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyreportingoverflow(by:)-6my0w",
                "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkcoreinteger\/multiplyreportingoverflow(by:)",
                        "title" : "func multiplyReportingOverflow(by: Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/multiplyreportingoverflow(by:)-ugt4",
                "title" : "func multiplyReportingOverflow(by: Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/negatereportingoverflow()",
                "title" : "func negateReportingOverflow() -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/negatedreportingoverflow()",
                "title" : "func negatedReportingOverflow() -> PVO<Self>",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkcoreinteger\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/subtractreportingoverflow(_:)-46k05",
                "title" : "func subtractReportingOverflow(Self) -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbkcoreinteger\/subtractreportingoverflow(_:)",
                        "title" : "func subtractReportingOverflow(Self) -> Bool",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKCoreInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/subtractreportingoverflow(_:)-526y0",
                "title" : "func subtractReportingOverflow(Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/subtractingreportingoverflow(_:)-81e6v",
                "title" : "func subtractingReportingOverflow(Self.Digit) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkfixedwidthinteger\/subtractingreportingoverflow(_:)-8371o",
                "title" : "func subtractingReportingOverflow(Self) -> PVO<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkfixedwidthinteger",
            "title" : "NBKFixedWidthInteger",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbksignedinteger\/-(_:)-1kbja",
                        "title" : "static func - (Self) -> Self",
                        "type" : "op"
                      }
                    ],
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbksignedinteger\/-(_:)-6piqk",
                "title" : "static func - (Self) -> Self",
                "type" : "op"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbksignedinteger\/negate()-7vb46",
                        "title" : "func negate()",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbksignedinteger\/negate()-8cb78",
                "title" : "func negate()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbksignedinteger\/negatereportingoverflow()",
                "title" : "func negateReportingOverflow() -> Bool",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/numberick\/nbksignedinteger\/negated()-4udpi",
                        "title" : "func negated() -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "NBKSignedInteger Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbksignedinteger\/negated()-1j48c",
                "title" : "func negated() -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbksignedinteger\/negatedreportingoverflow()",
                "title" : "func negatedReportingOverflow() -> PVO<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/numberick\/nbksignedinteger",
            "title" : "NBKSignedInteger",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkunsignedinteger\/subtractreportingoverflow(_:)-467am",
                "title" : "func subtractReportingOverflow(Self.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkunsignedinteger\/subtractreportingoverflow(_:)-8hhop",
                "title" : "func subtractReportingOverflow(Self) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkunsignedinteger\/subtractingreportingoverflow(_:)-2q20i",
                "title" : "func subtractingReportingOverflow(Self) -> PVO<Self>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkunsignedinteger\/subtractingreportingoverflow(_:)-7qeuq",
                "title" : "func subtractingReportingOverflow(Self.Digit) -> PVO<Self>",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkunsignedinteger",
            "title" : "NBKUnsignedInteger",
            "type" : "protocol"
          },
          {
            "title" : "Models",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkchunkedint\/init(_:issigned:count:as:)",
                "title" : "init(Base, isSigned: Bool, count: Int?, as: Element.Type)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkchunkedint\/count-9nc1o",
                "title" : "let count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkchunkedint\/sign",
                "title" : "let sign: Element",
                "type" : "property"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkchunkedint\/subscript(_:)-7s780",
                "title" : "subscript(Int) -> Element",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkchunkedint\/base",
                "title" : "NBKChunkedInt.Base",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/last",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/difference(from:)",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/firstrange(of:)-6v90m",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/joined(separator:)-1dkon",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/lastindex(of:)",
                    "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkchunkedint\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/count-1oej4",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/endindex",
                    "title" : "var endIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/startindex",
                    "title" : "var startIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/underestimatedcount-5tknt",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/firstrange(of:)-43cid",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/map(_:)-6zluk",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/subscript(_:)-295fj",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/subscript(_:)-40gmo",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/subscript(_:)-7kbkg",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkchunkedint\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/indices",
                    "title" : "var indices: Range<Int>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/distance(from:to:)",
                    "title" : "func distance(from: Int, to: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/formindex(after:)",
                    "title" : "func formIndex(after: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/formindex(before:)",
                    "title" : "func formIndex(before: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/index(_:offsetby:)",
                    "title" : "func index(Int, offsetBy: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/index(after:)",
                    "title" : "func index(after: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/index(before:)",
                    "title" : "func index(before: Int) -> Int",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkchunkedint\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/underestimatedcount-22ffl",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/flatmap(_:)-2lz1o",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/flatmap(_:)-2v7d8",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/joined(separator:)-52j0b",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/joined(separator:)-8ofzp",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/map(_:)-3h7sm",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkchunkedint\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkchunkedint\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkchunkedint",
            "title" : "NBKChunkedInt",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-37f10",
                "title" : "static func &<< (NBKDoubleWidth<High>, some BinaryInteger) -> NBKDoubleWidth<High>",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-l69g",
                "title" : "static func &>> (NBKDoubleWidth<High>, some BinaryInteger) -> NBKDoubleWidth<High>",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(ascending:)",
                "title" : "init(ascending: LH<NBKDoubleWidth<High>.Low, High>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(descending:)",
                "title" : "init(descending: HL<High, NBKDoubleWidth<High>.Low>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(high:)",
                "title" : "init(high: High)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(high:low:)",
                "title" : "init(high: High, low: NBKDoubleWidth<High>.Low)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(low:)",
                "title" : "init(low: NBKDoubleWidth<High>.Low)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(low:high:)",
                "title" : "init(low: NBKDoubleWidth<High>.Low, high: High)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/ascending",
                "title" : "var ascending: LH<NBKDoubleWidth<High>.Low, High>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/descending",
                "title" : "var descending: HL<High, NBKDoubleWidth<High>.Low>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/first-9s2wl",
                "title" : "var first: UInt",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/high-swift.property",
                "title" : "var high: High",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/last-3wlna",
                "title" : "var last: UInt",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/lastindex",
                "title" : "var lastIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/low-swift.property",
                "title" : "var low: NBKDoubleWidth<High>.Low",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/tail",
                "title" : "var tail: NBKDoubleWidth<High>.Digit",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotateleft(major:)",
                "title" : "func bitrotateLeft(major: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotateleft(major:minor:)",
                "title" : "func bitrotateLeft(major: Int, minor: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotateright(major:)",
                "title" : "func bitrotateRight(major: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotateright(major:minor:)",
                "title" : "func bitrotateRight(major: Int, minor: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotatedleft(major:)",
                "title" : "func bitrotatedLeft(major: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotatedleft(major:minor:)",
                "title" : "func bitrotatedLeft(major: Int, minor: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotatedright(major:)",
                "title" : "func bitrotatedRight(major: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotatedright(major:minor:)",
                "title" : "func bitrotatedRight(major: Int, minor: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftleft(major:)",
                "title" : "func bitshiftLeft(major: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftleft(major:minor:)",
                "title" : "func bitshiftLeft(major: Int, minor: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftleftsmart(by:)",
                "title" : "func bitshiftLeftSmart(by: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftright(major:)",
                "title" : "func bitshiftRight(major: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftright(major:minor:)",
                "title" : "func bitshiftRight(major: Int, minor: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftrightsmart(by:)",
                "title" : "func bitshiftRightSmart(by: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedleft(major:)",
                "title" : "func bitshiftedLeft(major: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedleft(major:minor:)",
                "title" : "func bitshiftedLeft(major: Int, minor: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedleftsmart(by:)",
                "title" : "func bitshiftedLeftSmart(by: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedright(major:)",
                "title" : "func bitshiftedRight(major: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedright(major:minor:)",
                "title" : "func bitshiftedRight(major: Int, minor: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedrightsmart(by:)",
                "title" : "func bitshiftedRightSmart(by: Int) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividingfullwidth(_:)-6zn3u",
                "title" : "func dividingFullWidth(NBKDoubleWidth<NBKDoubleWidth<High>>) -> QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividingfullwidthreportingoverflow(_:)-27oc0",
                "title" : "func dividingFullWidthReportingOverflow(NBKDoubleWidth<NBKDoubleWidth<High>>) -> PVO<QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/formquotientwithremainderreportingoverflow(dividingby:)",
                "title" : "func formQuotientWithRemainderReportingOverflow(dividingBy: NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>.Digit>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplied(by:adding:)",
                "title" : "func multiplied(by: NBKDoubleWidth<High>.Digit, adding: NBKDoubleWidth<High>.Digit) -> NBKDoubleWidth<High>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedfullwidth(by:adding:)",
                "title" : "func multipliedFullWidth(by: NBKDoubleWidth<High>.Digit, adding: NBKDoubleWidth<High>.Digit) -> HL<NBKDoubleWidth<High>.Digit, NBKDoubleWidth<High>.Magnitude>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedreportingoverflow(by:adding:)",
                "title" : "func multipliedReportingOverflow(by: NBKDoubleWidth<High>.Digit, adding: NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiply(by:add:)",
                "title" : "func multiply(by: NBKDoubleWidth<High>.Digit, add: NBKDoubleWidth<High>.Digit)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyfullwidth(by:add:)",
                "title" : "func multiplyFullWidth(by: NBKDoubleWidth<High>.Digit, add: NBKDoubleWidth<High>.Digit) -> NBKDoubleWidth<High>.Digit",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyreportingoverflow(by:add:)",
                "title" : "func multiplyReportingOverflow(by: NBKDoubleWidth<High>.Digit, add: NBKDoubleWidth<High>.Digit) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousmutablestorage(_:)",
                "title" : "func withContiguousMutableStorage<T>((inout UnsafeMutableBufferPointer<UInt>) throws -> T) rethrows -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousstorage(_:)",
                "title" : "func withContiguousStorage<T>((UnsafeBufferPointer<UInt>) throws -> T) rethrows -> T",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(unchecked:)",
                "title" : "subscript(unchecked _: Int) -> UInt",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitpattern-swift.typealias",
                "title" : "NBKDoubleWidth.BitPattern",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/digit",
                "title" : "NBKDoubleWidth.Digit",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/high-swift.typealias",
                "title" : "NBKDoubleWidth.High",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/low-swift.typealias",
                "title" : "NBKDoubleWidth.Low",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/magnitude-swift.typealias",
                "title" : "NBKDoubleWidth.Magnitude",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/count-swift.type.property",
                "title" : "static var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/description-swift.type.property",
                "title" : "static var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/issigned-94hrq",
                "title" : "static var isSigned: Bool",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+(_:)",
                    "title" : "static func + (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+=(_:_:)-nist",
                    "title" : "static func += (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-=(_:_:)-3m2lq",
                    "title" : "static func -= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/zero",
                    "title" : "static var zero: Self",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/additivearithmetic-implementations",
                "title" : "AdditiveArithmetic Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/last-60hwa",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/difference(from:)",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/firstrange(of:)-183tn",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/lastindex(of:)",
                    "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/!=(_:_:)-4r6y6",
                    "title" : "static func != <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/!=(_:_:)-97m9r",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&(_:_:)",
                    "title" : "static func & (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&=(_:_:)",
                    "title" : "static func &= (inout NBKDoubleWidth<High>, NBKDoubleWidth<High>)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/==(_:_:)-7wvmj",
                    "title" : "static func == <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-1sutw",
                    "title" : "static func > <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-2pre",
                    "title" : "static func < <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-4c827",
                    "title" : "static func ^ (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-d8rj",
                    "title" : "static func | (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-2hvnj",
                    "title" : "static func <= <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-2u1g1",
                    "title" : "static func ^= (inout NBKDoubleWidth<High>, NBKDoubleWidth<High>)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-42r7i",
                    "title" : "static func |= (inout NBKDoubleWidth<High>, NBKDoubleWidth<High>)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-7u94a",
                    "title" : "static func >= <Other>(Self, Other) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-2dvcn",
                    "title" : "static func >> (NBKDoubleWidth<High>, some BinaryInteger) -> NBKDoubleWidth<High>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-4gi3w",
                    "title" : "static func << <RHS>(Self, RHS) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-60otg",
                    "title" : "static func >> <RHS>(Self, RHS) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-ayia",
                    "title" : "static func << (NBKDoubleWidth<High>, some BinaryInteger) -> NBKDoubleWidth<High>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__=(_:_:)-5llyo",
                    "title" : "static func <<= (inout NBKDoubleWidth<High>, some BinaryInteger)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__=(_:_:)-67kkp",
                    "title" : "static func >>= <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__=(_:_:)-6oc7y",
                    "title" : "static func <<= <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__=(_:_:)-9gzrm",
                    "title" : "static func >>= (inout NBKDoubleWidth<High>, some BinaryInteger)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/~(_:)-5f8gs",
                    "title" : "static func ~ (NBKDoubleWidth<High>) -> NBKDoubleWidth<High>",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-533xy",
                    "title" : "init(some BinaryInteger)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(clamping:)-5s7fi",
                    "title" : "init<T>(clamping: T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(truncatingifneeded:)-9yvsw",
                    "title" : "init<T>(truncatingIfNeeded: T)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/description-swift.property-2mcya",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/words",
                    "title" : "var words: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/ismultiple(of:)",
                    "title" : "func isMultiple(of: Self) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/binaryinteger-implementations",
                "title" : "BinaryInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/count-swift.property-71ui1",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/count-swift.property-8ukzl",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/first-45apb",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/underestimatedcount-8xy1x",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/firstrange(of:)-2pzmm",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/map(_:)-3200w",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(_:)-7nezt",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(_:)-84i2x",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(_:)-85rb5",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/'...(_:)-1597e",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/'...(_:)-5houl",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-10z47",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-2ymth",
                    "title" : "static func < (NBKDoubleWidth<High>, NBKDoubleWidth<High>) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-3sdwd",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-4uqnv",
                    "title" : "static func < (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-2dpy3",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-2v3al",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-54sit",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-8pwmx",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/!=(_:_:)-2s4k6",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/==(_:_:)-16pox",
                    "title" : "static func == (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/==(_:_:)-8a96z",
                    "title" : "static func == (NBKDoubleWidth<High>, NBKDoubleWidth<High>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(extendedgraphemeclusterliteral:)",
                    "title" : "init(extendedGraphemeClusterLiteral: Self.StringLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/expressiblebyextendedgraphemeclusterliteral-implementations",
                "title" : "ExpressibleByExtendedGraphemeClusterLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(integerliteral:)",
                    "title" : "init(integerLiteral: NBKDoubleWidth<High>.Digit.IntegerLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/expressiblebyintegerliteral-implementations",
                "title" : "ExpressibleByIntegerLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(stringliteral:)",
                    "title" : "init(stringLiteral: StaticString)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/expressiblebystringliteral-implementations",
                "title" : "ExpressibleByStringLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(unicodescalarliteral:)",
                    "title" : "init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/expressiblebyunicodescalarliteral-implementations",
                "title" : "ExpressibleByUnicodeScalarLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*(_:_:)-76tw9",
                    "title" : "static func &* (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*=(_:_:)-8ghqk",
                    "title" : "static func &*= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+(_:_:)-2wwfw",
                    "title" : "static func &+ (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+=(_:_:)-9jbh3",
                    "title" : "static func &+= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-(_:_:)-4lcl3",
                    "title" : "static func &- (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-=(_:_:)-7zd4q",
                    "title" : "static func &-= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-17uf3",
                    "title" : "static func &<< (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-5cr1g",
                    "title" : "static func &>> (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-5ivpl",
                    "title" : "static func &>> <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__(_:_:)-6hh49",
                    "title" : "static func &<< <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__=(_:_:)-1gsio",
                    "title" : "static func &<<= (inout NBKDoubleWidth<High>, some BinaryInteger)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__=(_:_:)-2mtff",
                    "title" : "static func &>>= (inout NBKDoubleWidth<High>, some BinaryInteger)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__=(_:_:)-32fm5",
                    "title" : "static func &>>= <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&__=(_:_:)-66eo2",
                    "title" : "static func &<<= <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-5s32a",
                    "title" : "static func << <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/__(_:_:)-6p28k",
                    "title" : "static func >> <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/~(_:)-18oju",
                    "title" : "static func ~ (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-61xql",
                    "title" : "init<T>(T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-8k8fr",
                    "title" : "init?(String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:radix:)-837ky",
                    "title" : "init?<S>(S, radix: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bigendian:)-28a8x",
                    "title" : "init(bigEndian: NBKDoubleWidth<High>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bigendian:)-4e0nb",
                    "title" : "init(bigEndian: Self)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(clamping:)-7ll74",
                    "title" : "init<Other>(clamping: Other)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(exactly:)-777qp",
                    "title" : "init?<T>(exactly: T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(littleendian:)-3vasl",
                    "title" : "init(littleEndian: NBKDoubleWidth<High>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(littleendian:)-4t5za",
                    "title" : "init(littleEndian: Self)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(truncatingifneeded:)-2nr1a",
                    "title" : "init<T>(truncatingIfNeeded: T)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bigendian-2bai4",
                    "title" : "var bigEndian: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bigendian-bcs2",
                    "title" : "var bigEndian: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitwidth-swift.property",
                    "title" : "var bitWidth: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/byteswapped",
                    "title" : "var byteSwapped: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/leadingzerobitcount",
                    "title" : "var leadingZeroBitCount: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/littleendian-14uvk",
                    "title" : "var littleEndian: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/littleendian-7u58x",
                    "title" : "var littleEndian: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/nonzerobitcount",
                    "title" : "var nonzeroBitCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividedreportingoverflow(by:)-5v9qm",
                    "title" : "func dividedReportingOverflow(by: NBKDoubleWidth<High>) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/remainderreportingoverflow(dividingby:)-3ac0b",
                    "title" : "func remainderReportingOverflow(dividingBy: NBKDoubleWidth<High>) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitwidth-swift.type.property",
                    "title" : "static var bitWidth: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/max-qxvo",
                    "title" : "static var max: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/min-9k4hc",
                    "title" : "static var min: NBKDoubleWidth<High>",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/random(in:)-3grb6",
                    "title" : "static func random(in: Range<Self>) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/random(in:)-iwp4",
                    "title" : "static func random(in: ClosedRange<Self>) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/random(in:using:)-6jngj",
                    "title" : "static func random<T>(in: Range<Self>, using: inout T) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/random(in:using:)-8g5he",
                    "title" : "static func random<T>(in: ClosedRange<Self>, using: inout T) -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/fixedwidthinteger-implementations",
                "title" : "FixedWidthInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/partition(by:)-2uaao",
                    "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/partition(by:)-7pdes",
                    "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/reverse()",
                    "title" : "func reverse()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/shuffle()",
                    "title" : "func shuffle()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/shuffle(using:)",
                    "title" : "func shuffle<T>(using: inout T)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/sort()",
                    "title" : "func sort()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/sort(by:)",
                    "title" : "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/swapat(_:_:)",
                    "title" : "func swapAt(Self.Index, Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousmutablestorageifavailable(_:)-9kktr",
                    "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousmutablestorageifavailable(_:)-k6yz",
                    "title" : "func withContiguousMutableStorageIfAvailable<T>((inout UnsafeMutableBufferPointer<UInt>) throws -> T) rethrows -> T?",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(_:)-17yxh",
                    "title" : "subscript(Range<Self.Index>) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(_:)-70wks",
                    "title" : "subscript(Int) -> UInt",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(_:)-86xn8",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(_:)-9893o",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(_:)-9qcfv",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subscript(_:)-d104",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/mutablecollection-implementations",
                "title" : "MutableCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/\/(_:_:)-3t13o",
                    "title" : "static func \/ (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/\/(_:_:)-5ojtv",
                    "title" : "static func \/ (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/\/=(_:_:)-5j125",
                    "title" : "static func \/= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/\/=(_:_:)-74pyp",
                    "title" : "static func \/= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-6uz0d",
                    "title" : "static func % (Self, Self.Digit) -> Self.Digit",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_(_:_:)-7lvky",
                    "title" : "static func % (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-2f95j",
                    "title" : "static func %= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/_=(_:_:)-5n7it",
                    "title" : "static func %= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-1sktp",
                    "title" : "init?(String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:radix:)-3akmh",
                    "title" : "init?(some StringProtocol, radix: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bit:)-3q7ym",
                    "title" : "init(bit: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bit:)-55evi",
                    "title" : "init(bit: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(digit:)-1k0ze",
                    "title" : "init(digit: Self.Digit)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(digit:)-7enbr",
                    "title" : "init(digit: NBKDoubleWidth<High>.Digit)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(sign:magnitude:)",
                    "title" : "init?(sign: FloatingPointSign, magnitude: Self.Magnitude)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(words:)",
                    "title" : "init?(words: some RandomAccessCollection<UInt>)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(words:issigned:)",
                    "title" : "init?(words: some RandomAccessCollection<UInt>, isSigned: Bool)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/description-swift.property-3jo5c",
                    "title" : "var description: String",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/iseven",
                    "title" : "var isEven: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/islessthanzero-4s4mr",
                    "title" : "var isLessThanZero: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/islessthanzero-5pqdf",
                    "title" : "var isLessThanZero: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/ismorethanzero-2k0va",
                    "title" : "var isMoreThanZero: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/ismorethanzero-81nvq",
                    "title" : "var isMoreThanZero: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/isodd",
                    "title" : "var isOdd: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/ispowerof2",
                    "title" : "var isPowerOf2: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/iszero-315ie",
                    "title" : "var isZero: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/iszero-85wel",
                    "title" : "var isZero: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/leastsignificantbit-3vlel",
                    "title" : "var leastSignificantBit: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/leastsignificantbit-7xwqj",
                    "title" : "var leastSignificantBit: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/mostsignificantbit-69j8k",
                    "title" : "var mostSignificantBit: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/mostsignificantbit-8lvf6",
                    "title" : "var mostSignificantBit: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/trailingzerobitcount",
                    "title" : "var trailingZeroBitCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/compared(to:)-27rkr",
                    "title" : "func compared(to: NBKDoubleWidth<High>.Digit) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/compared(to:)-2iccq",
                    "title" : "func compared(to: NBKDoubleWidth<High>) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/description(radix:uppercase:)",
                    "title" : "func description(radix: Int, uppercase: Bool) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividereportingoverflow(by:)-3o5v2",
                    "title" : "func divideReportingOverflow(by: NBKDoubleWidth<High>.Digit) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividereportingoverflow(by:)-9062r",
                    "title" : "func divideReportingOverflow(by: NBKDoubleWidth<High>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividedreportingoverflow(by:)-3cxts",
                    "title" : "func dividedReportingOverflow(by: NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formonescomplement()",
                    "title" : "func formOnesComplement()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formremainderreportingoverflow(dividingby:)-4yqzw",
                    "title" : "func formRemainderReportingOverflow(dividingBy: NBKDoubleWidth<High>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formremainderreportingoverflow(dividingby:)-833km",
                    "title" : "func formRemainderReportingOverflow(dividingBy: NBKDoubleWidth<High>.Digit) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formtwoscomplement()",
                    "title" : "func formTwosComplement()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formtwoscomplementreportingoverflow()",
                    "title" : "func formTwosComplementReportingOverflow() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formtwoscomplementsubsequence(_:)",
                    "title" : "func formTwosComplementSubsequence(Bool) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/onescomplement()",
                    "title" : "func onesComplement() -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/quotientandremainder(dividingby:)",
                    "title" : "func quotientAndRemainder(dividingBy: Self) -> QR<Self, Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/quotientandremainderreportingoverflow(dividingby:)-6322f",
                    "title" : "func quotientAndRemainderReportingOverflow(dividingBy: NBKDoubleWidth<High>.Digit) -> PVO<QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>.Digit>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/quotientandremainderreportingoverflow(dividingby:)-s8rb",
                    "title" : "func quotientAndRemainderReportingOverflow(dividingBy: NBKDoubleWidth<High>) -> PVO<QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/remainderreportingoverflow(dividingby:)-7gczb",
                    "title" : "func remainderReportingOverflow(dividingBy: NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>.Digit>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/signum()",
                    "title" : "func signum() -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/twoscomplement()",
                    "title" : "func twosComplement() -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/twoscomplementreportingoverflow()",
                    "title" : "func twosComplementReportingOverflow() -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/twoscomplementsubsequence(_:)",
                    "title" : "func twosComplementSubsequence(Bool) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/nbkbinaryinteger-implementations",
                "title" : "NBKBinaryInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bitpattern:)-8av7p",
                    "title" : "init(bitPattern: NBKDoubleWidth<High>.BitPattern)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(bitpattern:)-8xw77",
                    "title" : "init(bitPattern: some NBKBitPatternConvertible<Self.BitPattern>)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitpattern-swift.property",
                    "title" : "var bitPattern: NBKDoubleWidth<High>.BitPattern",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/nbkbitpatternconvertible-implementations",
                "title" : "NBKBitPatternConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*(_:_:)-6ee7z",
                    "title" : "static func &* (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*(_:_:)-99w5r",
                    "title" : "static func &* (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*=(_:_:)-3g5ru",
                    "title" : "static func &*= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&*=(_:_:)-5caue",
                    "title" : "static func &*= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+(_:_:)-4fx59",
                    "title" : "static func &+ (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+(_:_:)-5p1oa",
                    "title" : "static func &+ (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+=(_:_:)-61pdw",
                    "title" : "static func &+= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&+=(_:_:)-8m3cr",
                    "title" : "static func &+= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-(_:_:)-7plcq",
                    "title" : "static func &- (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-(_:_:)-8u4m6",
                    "title" : "static func &- (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-=(_:_:)-4nc33",
                    "title" : "static func &-= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/&-=(_:_:)-79y07",
                    "title" : "static func &-= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/*(_:_:)-169ux",
                    "title" : "static func * (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/*(_:_:)-5c4g8",
                    "title" : "static func * (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/*=(_:_:)-6f3hs",
                    "title" : "static func *= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/*=(_:_:)-puov",
                    "title" : "static func *= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+(_:_:)-7govv",
                    "title" : "static func + (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+(_:_:)-9y9cj",
                    "title" : "static func + (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+=(_:_:)-6kxz1",
                    "title" : "static func += (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/+=(_:_:)-70xbj",
                    "title" : "static func += (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-(_:_:)-2ur0j",
                    "title" : "static func - (Self, Self.Digit) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-(_:_:)-9bjzw",
                    "title" : "static func - (Self, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-=(_:_:)-2assg",
                    "title" : "static func -= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-=(_:_:)-9tr5c",
                    "title" : "static func -= (inout Self, Self.Digit)",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-7kew3",
                    "title" : "init?(String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(repeating:)-2zt2y",
                    "title" : "init(repeating: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(repeating:)-4hf2m",
                    "title" : "init(repeating: Bool)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/addreportingoverflow(_:)-32dm2",
                    "title" : "func addReportingOverflow(NBKDoubleWidth<High>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/addreportingoverflow(_:)-8n6ql",
                    "title" : "func addReportingOverflow(NBKDoubleWidth<High>.Digit) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/addingreportingoverflow(_:)-1bdur",
                    "title" : "func addingReportingOverflow(NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/addingreportingoverflow(_:)-avka",
                    "title" : "func addingReportingOverflow(NBKDoubleWidth<High>) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotateleft(by:)-49jhn",
                    "title" : "func bitrotateLeft(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotateleft(by:)-s0vz",
                    "title" : "func bitrotateLeft(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotateright(by:)-1n2le",
                    "title" : "func bitrotateRight(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotateright(by:)-6r6c5",
                    "title" : "func bitrotateRight(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotatedleft(by:)",
                    "title" : "func bitrotatedLeft(by: Int) -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitrotatedright(by:)",
                    "title" : "func bitrotatedRight(by: Int) -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftleft(by:)-18j6n",
                    "title" : "func bitshiftLeft(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftleft(by:)-4y49a",
                    "title" : "func bitshiftLeft(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftright(by:)-2me77",
                    "title" : "func bitshiftRight(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftright(by:)-2vsai",
                    "title" : "func bitshiftRight(by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedleft(by:)",
                    "title" : "func bitshiftedLeft(by: Int) -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/bitshiftedright(by:)",
                    "title" : "func bitshiftedRight(by: Int) -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividingfullwidth(_:)-fshi",
                    "title" : "func dividingFullWidth(HL<NBKDoubleWidth<High>, NBKDoubleWidth<High>.Magnitude>) -> QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/dividingfullwidthreportingoverflow(_:)-6imc",
                    "title" : "func dividingFullWidthReportingOverflow(HL<NBKDoubleWidth<High>, NBKDoubleWidth<High>.Magnitude>) -> PVO<QR<NBKDoubleWidth<High>, NBKDoubleWidth<High>>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedfullwidth(by:)-6jba7",
                    "title" : "func multipliedFullWidth(by: NBKDoubleWidth<High>.Digit) -> HL<NBKDoubleWidth<High>.Digit, NBKDoubleWidth<High>.Magnitude>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedfullwidth(by:)-729im",
                    "title" : "func multipliedFullWidth(by: NBKDoubleWidth<High>) -> HL<NBKDoubleWidth<High>, NBKDoubleWidth<High>.Magnitude>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedreportingoverflow(by:)-640bw",
                    "title" : "func multipliedReportingOverflow(by: NBKDoubleWidth<High>) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multipliedreportingoverflow(by:)-6cbs9",
                    "title" : "func multipliedReportingOverflow(by: NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyfullwidth(by:)-17opd",
                    "title" : "func multiplyFullWidth(by: NBKDoubleWidth<High>.Digit) -> NBKDoubleWidth<High>.Digit",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyfullwidth(by:)-8zp8z",
                    "title" : "func multiplyFullWidth(by: NBKDoubleWidth<High>) -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyreportingoverflow(by:)-2971n",
                    "title" : "func multiplyReportingOverflow(by: NBKDoubleWidth<High>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/multiplyreportingoverflow(by:)-4gsvd",
                    "title" : "func multiplyReportingOverflow(by: NBKDoubleWidth<High>.Digit) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/negatereportingoverflow()",
                    "title" : "func negateReportingOverflow() -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/negatedreportingoverflow()",
                    "title" : "func negatedReportingOverflow() -> PVO<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subtractreportingoverflow(_:)-4c6cf",
                    "title" : "func subtractReportingOverflow(NBKDoubleWidth<High>.Digit) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subtractreportingoverflow(_:)-9fms7",
                    "title" : "func subtractReportingOverflow(NBKDoubleWidth<High>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subtractingreportingoverflow(_:)-3t1y",
                    "title" : "func subtractingReportingOverflow(NBKDoubleWidth<High>) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/subtractingreportingoverflow(_:)-yj1d",
                    "title" : "func subtractingReportingOverflow(NBKDoubleWidth<High>.Digit) -> PVO<NBKDoubleWidth<High>>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/nbkfixedwidthinteger-implementations",
                "title" : "NBKFixedWidthInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-(_:)-8aw0m",
                    "title" : "static func - (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/negate()-90c3g",
                    "title" : "func negate()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/negated()",
                    "title" : "func negated() -> Self",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/nbksignedinteger-implementations",
                "title" : "NBKSignedInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(exactly:)-5v9ae",
                    "title" : "init?<T>(exactly: T)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/magnitude-swift.property-34wnl",
                    "title" : "var magnitude: NBKDoubleWidth<High>.Magnitude",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/numeric-implementations",
                "title" : "Numeric Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/endindex",
                    "title" : "var endIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/indices",
                    "title" : "var indices: Range<Int>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/startindex",
                    "title" : "var startIndex: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/distance(from:to:)",
                    "title" : "func distance(from: Int, to: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formindex(after:)",
                    "title" : "func formIndex(after: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/formindex(before:)",
                    "title" : "func formIndex(before: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/index(_:offsetby:)",
                    "title" : "func index(Int, offsetBy: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/index(after:)",
                    "title" : "func index(after: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/index(before:)",
                    "title" : "func index(before: Int) -> Int",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/underestimatedcount-2luxn",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/contains(_:)",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/flatmap(_:)-1c1o8",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/flatmap(_:)-9e7f1",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/map(_:)-64a92",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousstorageifavailable(_:)-875hn",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/withcontiguousstorageifavailable(_:)-8z0j8",
                    "title" : "func withContiguousStorageIfAvailable<T>((UnsafeBufferPointer<UInt>) throws -> T) rethrows -> T?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-6psik",
                    "title" : "init<T>(T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(exactly:)-731o6",
                    "title" : "init?<T>(exactly: T)",
                    "type" : "init"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/issigned-42eie",
                    "title" : "static var isSigned: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/max-5utdk",
                    "title" : "static var max: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/min-eevh",
                    "title" : "static var min: Self",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/signedinteger-implementations",
                "title" : "SignedInteger Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/-(_:)-2fheo",
                    "title" : "static func - (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/negate()-7bhxv",
                    "title" : "func negate()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/signednumeric-implementations",
                "title" : "SignedNumeric Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/advanced(by:)",
                    "title" : "func advanced(by: Int) -> NBKDoubleWidth<High>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/distance(to:)",
                    "title" : "func distance(to: NBKDoubleWidth<High>) -> Int",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/strideable-implementations",
                "title" : "Strideable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(_:)-2f57n",
                    "title" : "init<T>(T)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/init(exactly:)-1f3qn",
                    "title" : "init?<T>(exactly: T)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/magnitude-swift.property-fvst",
                    "title" : "var magnitude: Self",
                    "type" : "property"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/issigned-20jsh",
                    "title" : "static var isSigned: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/max-8d20d",
                    "title" : "static var max: Self",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkdoublewidth\/min-8fgbu",
                    "title" : "static var min: Self",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkdoublewidth\/unsignedinteger-implementations",
                "title" : "UnsignedInteger Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkdoublewidth",
            "title" : "NBKDoubleWidth",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkendianness\/big",
                "title" : "case big",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/numberick\/nbkendianness\/little",
                "title" : "case little",
                "type" : "case"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbkendianness\/system",
                "title" : "static var system: NBKEndianness",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbkendianness\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbkendianness\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/numberick\/nbkendianness",
            "title" : "NBKEndianness",
            "type" : "enum"
          },
          {
            "title" : "Integers",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/numberick\/int128",
            "title" : "Int128",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/int256",
            "title" : "Int256",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/int512",
            "title" : "Int512",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/int1024",
            "title" : "Int1024",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/int2048",
            "title" : "Int2048",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/int4096",
            "title" : "Int4096",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint128",
            "title" : "UInt128",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint256",
            "title" : "UInt256",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint512",
            "title" : "UInt512",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint1024",
            "title" : "UInt1024",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint2048",
            "title" : "UInt2048",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/uint4096",
            "title" : "UInt4096",
            "type" : "typealias"
          },
          {
            "title" : "Abbreviations",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/numberick\/hl",
            "title" : "HL",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/lh",
            "title" : "LH",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/pvo",
            "title" : "PVO",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/qr",
            "title" : "QR",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/numberick\/sm",
            "title" : "SM",
            "type" : "typealias"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/signed",
                    "title" : "NBK.StrictBinaryInteger.Signed",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/unsigned",
                    "title" : "NBK.StrictBinaryInteger.Unsigned",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftleft(_:environment:major:minoratleastone:)",
                    "title" : "static func bitshiftLeft(inout Base, environment: Base.Element, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftleft(_:environment:majoratleastone:)",
                    "title" : "static func bitshiftLeft(inout Base, environment: Base.Element, majorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftleftcodeblock(_:environment:major:minoratleastone:)",
                    "title" : "static func bitshiftLeftCodeBlock(inout Base, environment: Base.Element, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftright(_:environment:major:minoratleastone:)",
                    "title" : "static func bitshiftRight(inout Base, environment: Base.Element, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftright(_:environment:majoratleastone:)",
                    "title" : "static func bitshiftRight(inout Base, environment: Base.Element, majorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/bitshiftrightcodeblock(_:environment:major:minoratleastone:)",
                    "title" : "static func bitshiftRightCodeBlock(inout Base, environment: Base.Element, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/formquotientwithremainderreportingoverflow(_:dividingby:signedness:)",
                    "title" : "static func formQuotientWithRemainderReportingOverflow<Digit>(inout Base, dividingBy: Base.Element, signedness: Digit.Type) -> PVO<Base.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/withunsafebufferpointer(to:perform:)",
                    "title" : "static func withUnsafeBufferPointer<T, U>(to: T, perform: (Base) throws -> U) rethrows -> U",
                    "type" : "method"
                  },
                  {
                    "title" : "Enumerations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/signed",
                        "title" : "NBK.StrictBinaryInteger.SubSequence.Signed",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/unsigned",
                        "title" : "NBK.StrictBinaryInteger.SubSequence.Unsigned",
                        "type" : "typealias"
                      },
                      {
                        "title" : "Type Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/formonescomplement(_:)",
                        "title" : "static func formOnesComplement(inout Base)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/formtwoscomplement(_:)",
                        "title" : "static func formTwosComplement(inout Base)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/leadingzerobitcount(of:)",
                        "title" : "static func leadingZeroBitCount(of: Base) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/mostsignificantbit(twoscomplementof:)",
                        "title" : "static func mostSignificantBit(twosComplementOf: Base) -> Bool?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/nonzerobitcount(of:)",
                        "title" : "static func nonzeroBitCount(of: Base) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/nonzerobitcount(of:equals:)",
                        "title" : "static func nonzeroBitCount(of: Base, equals: Int) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/nonzerobitcount(twoscomplementof:)",
                        "title" : "static func nonzeroBitCount(twosComplementOf: Base) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence\/trailingzerobitcount(of:)",
                        "title" : "static func trailingZeroBitCount(of: Base) -> Int",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger\/subsequence",
                    "title" : "NBK.StrictBinaryInteger.SubSequence",
                    "type" : "enum"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/strictbinaryinteger",
                "title" : "NBK.StrictBinaryInteger",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/init(_:sign:)",
                    "title" : "init(Base, sign: Bool)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/init(fromstrictsignedintegersubsequence:)",
                    "title" : "init?<T>(fromStrictSignedIntegerSubSequence: Base)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/init(fromstrictunsignedintegersubsequence:)",
                    "title" : "init<T>(fromStrictUnsignedIntegerSubSequence: Base)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/init(unchecked:sign:)",
                    "title" : "init(unchecked: Base, sign: Bool)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/body",
                    "title" : "let body: Base",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/sign",
                    "title" : "let sign: Bool",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/compared(to:)",
                    "title" : "func compared(to: NBK.SuccinctInt<Base>) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/compared(tosamesign:)",
                    "title" : "func compared(toSameSign: NBK.SuccinctInt<Base>) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/compared(tosamesignsamesize:)",
                    "title" : "func compared(toSameSignSameSize: NBK.SuccinctInt<Base>) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/succinctint\/isvalid(_:sign:)",
                    "title" : "static func isValid(Base, sign: Bool) -> Bool",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/succinctint",
                "title" : "NBK.SuccinctInt",
                "type" : "struct"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/io",
                "title" : "NBK.IO",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/sbi",
                "title" : "NBK.SBI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/sbiss",
                "title" : "NBK.SBISS",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/ssi",
                "title" : "NBK.SSI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/ssiss",
                "title" : "NBK.SSISS",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/sui",
                "title" : "NBK.SUI",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/suiss",
                "title" : "NBK.SUISS",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/sign",
                "title" : "NBK.Sign",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/twinheaded",
                "title" : "NBK.TwinHeaded",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/u128x32",
                "title" : "NBK.U128X32",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/u128x64",
                "title" : "NBK.U128X64",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/u256x32",
                "title" : "NBK.U256X32",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/u256x64",
                "title" : "NBK.U256X64",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/unsafemutableutf8",
                "title" : "NBK.UnsafeMutableUTF8",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/unsafemutablewords",
                "title" : "NBK.UnsafeMutableWords",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/unsafesuccinctwords",
                "title" : "NBK.UnsafeSuccinctWords",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/unsafeutf8",
                "title" : "NBK.UnsafeUTF8",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/unsafewords",
                "title" : "NBK.UnsafeWords",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/wide2",
                "title" : "NBK.Wide2",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/wide3",
                "title" : "NBK.Wide3",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/isbigendian",
                "title" : "static var isBigEndian: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/islittleendian",
                "title" : "static var isLittleEndian: Bool",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/arrayindex(_:offsetby:limitedby:)",
                "title" : "static func arrayIndex(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/bitcast(_:)-1kuiz",
                "title" : "static func bitCast<A0, A1, B0, B1>(HL<A0, A1>) -> HL<B0, B1>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/bitcast(_:)-5jtl5",
                "title" : "static func bitCast<A0, A1, B0, B1>(PVO<QR<A0, A1>>) -> PVO<QR<B0, B1>>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/bitcast(_:)-7qegl",
                "title" : "static func bitCast<A0, A1, B0, B1>(QR<A0, A1>) -> QR<B0, B1>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/bitcast(_:)-7r5yg",
                "title" : "static func bitCast<A0, B0>(PVO<A0>) -> PVO<B0>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/blackhole(_:)",
                "title" : "static func blackHole<T>(T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/blackholeidentity(_:)",
                "title" : "static func blackHoleIdentity<T>(T) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/blackholeinoutidentity(_:)",
                "title" : "static func blackHoleInoutIdentity<T>(inout T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/callsiteoutofboundsinfo(function:file:line:)",
                "title" : "static func callsiteOutOfBoundsInfo(function: StaticString, file: StaticString, line: UInt) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/callsiteoverflowinfo(function:file:line:)",
                "title" : "static func callsiteOverflowInfo(function: StaticString, file: StaticString, line: UInt) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/compare22s(_:to:)",
                "title" : "static func compare22S<T>(NBK.Wide2<T>, to: NBK.Wide2<T>) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/compare33s(_:to:)",
                "title" : "static func compare33S<T>(NBK.Wide3<T>, to: NBK.Wide3<T>) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/decrement32b(_:by:)",
                "title" : "static func decrement32B<T>(inout NBK.Wide3<T>, by: NBK.Wide2<T>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/decrement33b(_:by:)",
                "title" : "static func decrement33B<T>(inout NBK.Wide3<T>, by: NBK.Wide3<T>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/descriptionasstdlib(_:radix:uppercase:)",
                "title" : "static func descriptionAsStdlib(some BinaryInteger, radix: Int, uppercase: Bool) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/divide3212msbunchecked(_:by:)",
                "title" : "static func divide3212MSBUnchecked<T>(inout NBK.Wide3<T>, by: NBK.Wide2<T>) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/droplast(from:while:)",
                "title" : "static func dropLast<T>(from: T, while: (T.Element) -> Bool) -> T.SubSequence",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/increment32b(_:by:)",
                "title" : "static func increment32B<T>(inout NBK.Wide3<T>, by: NBK.Wide2<T>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/increment33b(_:by:)",
                "title" : "static func increment33B<T>(inout NBK.Wide3<T>, by: NBK.Wide3<T>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(_:as:)-1wo9x",
                "title" : "static func initOrBitCast<T, U>(T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(_:as:)-67xkt",
                "title" : "static func initOrBitCast<T, U>(T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(clamping:as:)-4r4ah",
                "title" : "static func initOrBitCast<T, U>(clamping: T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(clamping:as:)-6heju",
                "title" : "static func initOrBitCast<T, U>(clamping: T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(exactly:as:)-7ycp1",
                "title" : "static func initOrBitCast<T, U>(exactly: T, as: U.Type) -> U?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(exactly:as:)-8dwkj",
                "title" : "static func initOrBitCast<T, U>(exactly: T, as: U.Type) -> U?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(truncating:as:)-6rhdy",
                "title" : "static func initOrBitCast<T, U>(truncating: T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/initorbitcast(truncating:as:)-7lcao",
                "title" : "static func initOrBitCast<T, U>(truncating: T, as: U.Type) -> U",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/integerasstdlib(_:radix:as:)",
                "title" : "static func integerAsStdlib<T>(some StringProtocol, radix: Int, as: T.Type) -> Optional<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/leastpositiveresidue(of:dividingbybitwidthof:)",
                "title" : "static func leastPositiveResidue<T>(of: some BinaryInteger, dividingByBitWidthOf: T.Type) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/leastpositiveresiduereportingoverflow(of:dividingby:)",
                "title" : "static func leastPositiveResidueReportingOverflow<T>(of: T, dividingBy: UInt) -> PVO<UInt>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/magnitude(of:)",
                "title" : "static func magnitude<T>(of: NBK.Wide2<T>) -> NBK.Wide2<T.Magnitude>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/multiplying213(_:by:)",
                "title" : "static func multiplying213<T>(NBK.Wide2<T>, by: T) -> NBK.Wide3<T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/quotientdividingbybitwidth(_:)",
                "title" : "static func quotientDividingByBitWidth(UInt) -> UInt",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/quotientdividingbybitwidthassumingisatleastzero(_:)",
                "title" : "static func quotientDividingByBitWidthAssumingIsAtLeastZero(Int) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/remainderdividingbybitwidth(_:)",
                "title" : "static func remainderDividingByBitWidth(UInt) -> UInt",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/remainderdividingbybitwidthassumingisatleastzero(_:)",
                "title" : "static func remainderDividingByBitWidthAssumingIsAtLeastZero(Int) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/removeprefix(from:count:)",
                "title" : "static func removePrefix<T>(from: inout T, count: Int) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/removeprefix(from:maxlength:)",
                "title" : "static func removePrefix<T>(from: inout T, maxLength: Int) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/removesuffix(from:count:)",
                "title" : "static func removeSuffix<T>(from: inout T, count: Int) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/removesuffix(from:maxlength:)",
                "title" : "static func removeSuffix<T>(from: inout T, maxLength: Int) -> T",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/numberick\/nbk\/withunsafetemporaryallocation(copying:perform:)",
                "title" : "static func withUnsafeTemporaryAllocation<Element, Result>(copying: some Collection, perform: (inout UnsafeMutableBufferPointer<Element>) -> Result) -> Result",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixalphabetdecoder\/init(radix:)",
                        "title" : "init(radix: Int)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixalphabetdecoder\/decode(_:)",
                        "title" : "func decode(UInt8) -> UInt8?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixalphabetdecoder",
                    "title" : "NBK.IntegerDescription.AnyRadixAlphabetDecoder",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/init(_:)-2jban",
                        "title" : "init(Int)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/init(_:)-7js6c",
                        "title" : "init(NBK.IntegerDescription.PerfectRadixSolution<Element>)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/init(_:)-jmif",
                        "title" : "init(NBK.IntegerDescription.ImperfectRadixSolution<Element>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/base",
                        "title" : "let base: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/exponent",
                        "title" : "let exponent: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution\/power",
                        "title" : "let power: Element",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/anyradixsolution",
                    "title" : "NBK.IntegerDescription.AnyRadixSolution",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/init(radix:)",
                        "title" : "init(radix: Int)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/decode(_:as:)-1xe2s",
                        "title" : "func decode<M>(StaticString, as: SM<M>.Type) -> SM<M>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/decode(_:as:)-33z9s",
                        "title" : "func decode<T>(StaticString, as: T.Type) -> T?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/decode(_:as:)-3kg3a",
                        "title" : "func decode<M>(some StringProtocol, as: SM<M>.Type) -> SM<M>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/decode(_:as:)-5k9m4",
                        "title" : "func decode<T>(NBK.UnsafeUTF8, as: T.Type) -> T?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/decode(_:as:)-64185",
                        "title" : "func decode<T>(some StringProtocol, as: T.Type) -> T?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder\/decode(_:as:)-rif9",
                        "title" : "func decode<M>(NBK.UnsafeUTF8, as: SM<M>.Type) -> SM<M>?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoder",
                    "title" : "NBK.IntegerDescription.Decoder",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/decode(_:as:)-17ez3",
                        "title" : "func decode<M>(some StringProtocol, as: SM<M>.Type) -> SM<M>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/decode(_:as:)-3ks7m",
                        "title" : "func decode<T>(some StringProtocol, as: T.Type) -> T?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/decode(_:as:)-5jn2b",
                        "title" : "func decode<M>(StaticString, as: SM<M>.Type) -> SM<M>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/decode(_:as:)-67qk3",
                        "title" : "func decode<T>(NBK.UnsafeUTF8, as: T.Type) -> T?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/decode(_:as:)-7e7w8",
                        "title" : "func decode<M>(NBK.UnsafeUTF8, as: SM<M>.Type) -> SM<M>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix\/decode(_:as:)-84cje",
                        "title" : "func decode<T>(StaticString, as: T.Type) -> T?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/decoderdecodingradix",
                    "title" : "NBK.IntegerDescription.DecoderDecodingRadix",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/encoder\/init(radix:uppercase:)",
                        "title" : "init(radix: Int, uppercase: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/encoder\/encode(_:)",
                        "title" : "func encode(some NBKBinaryInteger) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/encoder\/encode(sign:magnitude:)",
                        "title" : "func encode(sign: FloatingPointSign, magnitude: some RandomAccessCollection<UInt>) -> String",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/encoder",
                    "title" : "NBK.IntegerDescription.Encoder",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/divisor\/dividing(_:)",
                            "title" : "func dividing(Element) -> QR<Element, Element>",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/divisor",
                        "title" : "NBK.IntegerDescription.ImperfectRadixSolution.Divisor",
                        "type" : "struct"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/init(_:)",
                        "title" : "init?(NBK.IntegerDescription.AnyRadixSolution<Element>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/base",
                        "title" : "var base: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/exponent",
                        "title" : "var exponent: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/power",
                        "title" : "var power: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/solution",
                        "title" : "let solution: NBK.IntegerDescription.AnyRadixSolution<Element>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/divisibilitybypowerupperbound(magnitude:)",
                        "title" : "func divisibilityByPowerUpperBound(magnitude: some Collection<UInt>) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution\/divisor()",
                        "title" : "func divisor() -> NBK.IntegerDescription.ImperfectRadixSolution<Element>.Divisor",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/imperfectradixsolution",
                    "title" : "NBK.IntegerDescription.ImperfectRadixSolution",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/maxradixalphabetencoder\/init(uppercase:)",
                        "title" : "init(uppercase: Bool)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/maxradixalphabetencoder\/encode(_:)",
                        "title" : "func encode(UInt8) -> UInt8?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/maxradixalphabetencoder",
                    "title" : "NBK.IntegerDescription.MaxRadixAlphabetEncoder",
                    "type" : "struct"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/divisor\/dividing(_:)",
                            "title" : "func dividing(Element) -> QR<Element, Element>",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/divisor",
                        "title" : "NBK.IntegerDescription.PerfectRadixSolution.Divisor",
                        "type" : "struct"
                      },
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/init(_:)",
                        "title" : "init?(NBK.IntegerDescription.AnyRadixSolution<Element>)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/base",
                        "title" : "var base: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/exponent",
                        "title" : "var exponent: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/power",
                        "title" : "var power: Element",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/solution",
                        "title" : "let solution: NBK.IntegerDescription.AnyRadixSolution<Element>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution\/divisor()",
                        "title" : "func divisor() -> NBK.IntegerDescription.PerfectRadixSolution<Element>.Divisor",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/perfectradixsolution",
                    "title" : "NBK.IntegerDescription.PerfectRadixSolution",
                    "type" : "struct"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/makesignbody(from:)",
                    "title" : "static func makeSignBody<UTF8>(from: UTF8) -> (sign: NBK.Sign, body: UTF8.SubSequence)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/makesignradixbody(from:)",
                    "title" : "static func makeSignRadixBody<UTF8>(from: UTF8) -> (sign: NBK.Sign, radix: Int, body: UTF8.SubSequence)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/removeleadingradix(from:)",
                    "title" : "static func removeLeadingRadix<UTF8>(from: inout UTF8) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/removeleadingsign(from:)",
                    "title" : "static func removeLeadingSign<UTF8>(from: inout UTF8) -> NBK.Sign?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/truncating(digits:radix:as:)",
                    "title" : "static func truncating<Digit>(digits: NBK.UnsafeUTF8, radix: Int, as: Digit.Type) -> Digit?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/integerdescription\/withunsafetemporarysignprefix(minus:perform:)",
                    "title" : "static func withUnsafeTemporarySignPrefix<T>(minus: Bool, perform: (NBK.UnsafeUTF8) -> T) -> T",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/integerdescription",
                "title" : "NBK.IntegerDescription",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/binary",
                    "title" : "NBK.StrictSignedInteger.Binary",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/unsigned",
                    "title" : "NBK.StrictSignedInteger.Unsigned",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/compare(_:to:)",
                    "title" : "static func compare<T>(Base, to: Base) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/compare(_:to:at:)",
                    "title" : "static func compare<T>(Base, to: Base, at: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Enumerations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/subsequence\/binary",
                        "title" : "NBK.StrictSignedInteger.SubSequence.Binary",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/subsequence\/unsigned",
                        "title" : "NBK.StrictSignedInteger.SubSequence.Unsigned",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger\/subsequence",
                    "title" : "NBK.StrictSignedInteger.SubSequence",
                    "type" : "enum"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/strictsignedinteger",
                "title" : "NBK.StrictSignedInteger",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/binary",
                    "title" : "NBK.StrictUnsignedInteger.Binary",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/signed",
                    "title" : "NBK.StrictUnsignedInteger.Signed",
                    "type" : "typealias"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftleft(_:by:)",
                    "title" : "static func bitshiftLeft(inout Base, by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftleft(_:major:)",
                    "title" : "static func bitshiftLeft(inout Base, major: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftleft(_:major:minor:)",
                    "title" : "static func bitshiftLeft(inout Base, major: Int, minor: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftleft(_:major:minoratleastone:)",
                    "title" : "static func bitshiftLeft(inout Base, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftleft(_:majoratleastone:)",
                    "title" : "static func bitshiftLeft(inout Base, majorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftright(_:by:)",
                    "title" : "static func bitshiftRight(inout Base, by: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftright(_:major:)",
                    "title" : "static func bitshiftRight(inout Base, major: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftright(_:major:minor:)",
                    "title" : "static func bitshiftRight(inout Base, major: Int, minor: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftright(_:major:minoratleastone:)",
                    "title" : "static func bitshiftRight(inout Base, major: Int, minorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/bitshiftright(_:majoratleastone:)",
                    "title" : "static func bitshiftRight(inout Base, majorAtLeastOne: Int)",
                    "type" : "method"
                  },
                  {
                    "title" : "Enumerations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/binary",
                        "title" : "NBK.StrictUnsignedInteger.SubSequence.Binary",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/signed",
                        "title" : "NBK.StrictUnsignedInteger.SubSequence.Signed",
                        "type" : "typealias"
                      },
                      {
                        "title" : "Type Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/compare(_:to:)",
                        "title" : "static func compare<T>(Base, to: Base) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/compare(_:to:at:)",
                        "title" : "static func compare<T>(Base, to: Base, at: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:at:)-1mb78",
                        "title" : "static func decrement(inout Base, by: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:at:)-2n3y8",
                        "title" : "static func decrement(inout Base, by: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:at:)-6hfao",
                        "title" : "static func decrement(inout Base, by: Base.Element, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:at:)-95tf",
                        "title" : "static func decrement(inout Base, by: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:plus:at:)-54k7b",
                        "title" : "static func decrement(inout Base, by: Base.Element, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:plus:at:)-82jj7",
                        "title" : "static func decrement(inout Base, by: Base.Element, plus: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:plus:at:)-8x450",
                        "title" : "static func decrement(inout Base, by: some Collection<Base.Element>, plus: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:plus:at:)-y0vj",
                        "title" : "static func decrement(inout Base, by: some Collection<Base.Element>, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:times:plus:plus:at:)-3wogo",
                        "title" : "static func decrement(inout Base, by: some Collection<Base.Element>, times: Base.Element, plus: Base.Element, plus: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrement(_:by:times:plus:plus:at:)-5hefq",
                        "title" : "static func decrement(inout Base, by: some Collection<Base.Element>, times: Base.Element, plus: Base.Element, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:at:)-9coel",
                        "title" : "static func decrementInIntersection(inout Base, by: Base.Element, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:at:)-zzzr",
                        "title" : "static func decrementInIntersection(inout Base, by: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:plus:at:)-3jx7a",
                        "title" : "static func decrementInIntersection(inout Base, by: some Collection<Base.Element>, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:plus:at:)-4b6xv",
                        "title" : "static func decrementInIntersection(inout Base, by: Base.Element, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:plus:at:)-67z99",
                        "title" : "static func decrementInIntersection(inout Base, by: some Collection<Base.Element>, plus: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/decrementinintersection(_:by:plus:at:)-713cd",
                        "title" : "static func decrementInIntersection(inout Base, by: Base.Element, plus: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/formquotientwithremainderreportingoverflow(_:dividingby:)",
                        "title" : "static func formQuotientWithRemainderReportingOverflow(inout Base, dividingBy: Base.Element) -> PVO<Base.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/formquotientwithremainderreportingoverflow(_:dividingby:in:)-17ydz",
                        "title" : "static func formQuotientWithRemainderReportingOverflow(inout Base, dividingBy: Base.Element, in: Range<Base.Index>) -> PVO<Base.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/formquotientwithremainderreportingoverflow(_:dividingby:in:)-4ahbu",
                        "title" : "static func formQuotientWithRemainderReportingOverflow(inout Base, dividingBy: Base.Element, in: some RangeExpression<Base.Index>) -> PVO<Base.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/formtwoscomplementreportingoverflow(_:)",
                        "title" : "static func formTwosComplementReportingOverflow(inout Base) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/formtwoscomplementsubsequence(_:carry:)",
                        "title" : "static func formTwosComplementSubsequence(inout Base, carry: Bool) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:at:)-4jwd4",
                        "title" : "static func increment(inout Base, by: Base.Element, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:at:)-58jmq",
                        "title" : "static func increment(inout Base, by: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:at:)-6ngkf",
                        "title" : "static func increment(inout Base, by: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:at:)-9j7e9",
                        "title" : "static func increment(inout Base, by: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:plus:at:)-2ew5g",
                        "title" : "static func increment(inout Base, by: some Collection<Base.Element>, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:plus:at:)-61qb6",
                        "title" : "static func increment(inout Base, by: Base.Element, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:plus:at:)-6cobm",
                        "title" : "static func increment(inout Base, by: Base.Element, plus: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/increment(_:by:plus:at:)-ibqr",
                        "title" : "static func increment(inout Base, by: some Collection<Base.Element>, plus: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:at:)-1fto7",
                        "title" : "static func incrementInIntersection(inout Base, by: Base.Element, at: inout Base.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:at:)-3uyrt",
                        "title" : "static func incrementInIntersection(inout Base, by: Base.Element, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:plus:at:)-15zdo",
                        "title" : "static func incrementInIntersection(inout Base, by: some Collection<Base.Element>, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:plus:at:)-3fhj3",
                        "title" : "static func incrementInIntersection(inout Base, by: Base.Element, plus: inout Bool, at: inout Base.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:plus:at:)-4mf3o",
                        "title" : "static func incrementInIntersection(inout Base, by: Base.Element, plus: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/incrementinintersection(_:by:plus:at:)-7kkim",
                        "title" : "static func incrementInIntersection(inout Base, by: some Collection<Base.Element>, plus: Bool, at: Base.Index) -> NBK.IO<Base.Index>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/multiplyfullwidth(_:by:add:)",
                        "title" : "static func multiplyFullWidth(inout Base, by: Base.Element, add: Base.Element) -> Base.Element",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/multiplyfullwidth(_:by:add:in:)-4wwd6",
                        "title" : "static func multiplyFullWidth(inout Base, by: Base.Element, add: Base.Element, in: some RangeExpression<Base.Index>) -> Base.Element",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/multiplyfullwidth(_:by:add:in:)-85wv3",
                        "title" : "static func multiplyFullWidth(inout Base, by: Base.Element, add: Base.Element, in: Range<Base.Index>) -> Base.Element",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/multiplyreportingoverflow(_:by:add:)",
                        "title" : "static func multiplyReportingOverflow(inout Base, by: Base.Element, add: Base.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/multiplyreportingoverflow(_:by:add:in:)-4wzl0",
                        "title" : "static func multiplyReportingOverflow(inout Base, by: Base.Element, add: Base.Element, in: Range<Base.Index>) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/multiplyreportingoverflow(_:by:add:in:)-63e4h",
                        "title" : "static func multiplyReportingOverflow(inout Base, by: Base.Element, add: Base.Element, in: some RangeExpression<Base.Index>) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/remainderreportingoverflow(_:dividingby:)",
                        "title" : "static func remainderReportingOverflow(Base, dividingBy: Base.Element) -> PVO<Base.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/remainderreportingoverflow(_:dividingby:in:)-750iy",
                        "title" : "static func remainderReportingOverflow(Base, dividingBy: Base.Element, in: Range<Base.Index>) -> PVO<Base.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence\/remainderreportingoverflow(_:dividingby:in:)-mf0d",
                        "title" : "static func remainderReportingOverflow(Base, dividingBy: Base.Element, in: some RangeExpression<Base.Index>) -> PVO<Base.Element>",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger\/subsequence",
                    "title" : "NBK.StrictUnsignedInteger.SubSequence",
                    "type" : "enum"
                  }
                ],
                "path" : "\/documentation\/numberick\/nbk\/strictunsignedinteger",
                "title" : "NBK.StrictUnsignedInteger",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/numberick\/nbk",
            "title" : "NBK",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/numberick",
        "title" : "Numberick",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 1
  }
}