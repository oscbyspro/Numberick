{
  "abstract" : [
    {
      "text" : "A generator of all prime ",
      "type" : "text"
    },
    {
      "code" : "elements",
      "type" : "codeVoice"
    },
    {
      "text" : " through some ",
      "type" : "text"
    },
    {
      "code" : "limit",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Numberick\/documentation\/Numberick"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:10NBKCoreKit13NBKPrimeSieveC",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "class"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "NBKPrimeSieve"
      }
    ],
    "modules" : [
      {
        "name" : "Numberick"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "NBKPrimeSieve"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Class",
    "symbolKind" : "class",
    "title" : "NBKPrimeSieve"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "iOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "final"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "class"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "NBKPrimeSieve"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "It sieves one page on creation, then one per call to ",
              "type" : "text"
            },
            {
              "code" : "increment()",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Sieve-all-primes-through-some--limit-",
          "level" : 3,
          "text" : "Sieve all primes through some « limit »",
          "type" : "heading"
        },
        {
          "code" : [
            "let ((sieve)) = NBKPrimeSieve()",
            "while sieve.limit < 1_000_000 {",
            "    ((sieve)).increment()",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Sieve-at-least--count--number-of-primes",
          "level" : 3,
          "text" : "Sieve at least « count » number of primes",
          "type" : "heading"
        },
        {
          "code" : [
            "let ((sieve)) = NBKPrimeSieve()",
            "while sieve.elements.count < 1_000_000 {",
            "    ((sieve)).increment()",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Customization",
          "level" : 3,
          "text" : "Customization",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "This sieve offers multiple customization options, which may improve performance.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Here’s an example that’s suitable for numbers up to a billion on a machine where",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the CPU’s L1 data cache is 128 KiB:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "NBKPrimeSieve(cache: .KiB(128), wheel: .x11, culls: .x31, capacity: 50863957)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The size of the cache determines the size of each increment.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "Note",
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/Numberick\/s23CustomStringConvertibleP"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKChunkedInt",
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKDoubleWidth",
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKEndianness"
      ],
      "title" : "Models"
    }
  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/Cache",
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/Culls",
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/Wheel"
      ],
      "title" : "Structures"
    },
    {
      "identifiers" : [
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/init(cache:wheel:culls:capacity:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/description",
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/elements",
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/limit"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/increment()"
      ],
      "title" : "Instance Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/numberick\/nbkprimesieve"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Numberick/documentation/Numberick": {
  "abstract" : [
    {
      "text" : "✨ An arithmagick overhaul in Swift.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Numberick",
  "type" : "topic",
  "url" : "\/documentation\/numberick"
},
"doc://Numberick/documentation/Numberick/NBKChunkedInt": {
  "abstract" : [
    {
      "text" : "A sequence that chunks elements of an un\/signed source.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NBKChunkedInt"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKChunkedInt",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NBKChunkedInt"
    }
  ],
  "role" : "symbol",
  "title" : "NBKChunkedInt",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkchunkedint"
},
"doc://Numberick/documentation/Numberick/NBKDoubleWidth": {
  "abstract" : [
    {
      "text" : "A composable, large, fixed-width, two’s complement, binary integer.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NBKDoubleWidth"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKDoubleWidth",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NBKDoubleWidth"
    }
  ],
  "role" : "symbol",
  "title" : "NBKDoubleWidth",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkdoublewidth"
},
"doc://Numberick/documentation/Numberick/NBKEndianness": {
  "abstract" : [
    {
      "text" : "An enumeration of little and big endianness.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NBKEndianness"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKEndianness",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NBKEndianness"
    }
  ],
  "role" : "symbol",
  "title" : "NBKEndianness",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkendianness"
},
"doc://Numberick/documentation/Numberick/NBKPrimeSieve": {
  "abstract" : [
    {
      "text" : "A generator of all prime ",
      "type" : "text"
    },
    {
      "code" : "elements",
      "type" : "codeVoice"
    },
    {
      "text" : " through some ",
      "type" : "text"
    },
    {
      "code" : "limit",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "NBKPrimeSieve"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "NBKPrimeSieve"
    }
  ],
  "role" : "symbol",
  "title" : "NBKPrimeSieve",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkprimesieve"
},
"doc://Numberick/documentation/Numberick/NBKPrimeSieve/Cache": {
  "abstract" : [
    {
      "text" : "A finite sequence of odd numbers represented by a collection of bits.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Cache"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/Cache",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Cache"
    }
  ],
  "role" : "symbol",
  "title" : "NBKPrimeSieve.Cache",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkprimesieve\/cache"
},
"doc://Numberick/documentation/Numberick/NBKPrimeSieve/Culls": {
  "abstract" : [
    {
      "text" : "A collection of cyclical patterns used to cull multiples of small primes.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Culls"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/Culls",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Culls"
    }
  ],
  "role" : "symbol",
  "title" : "NBKPrimeSieve.Culls",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkprimesieve\/culls"
},
"doc://Numberick/documentation/Numberick/NBKPrimeSieve/Wheel": {
  "abstract" : [
    {
      "text" : "A cyclical pattern used to skip small prime multiples.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Wheel"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/Wheel",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Wheel"
    }
  ],
  "role" : "symbol",
  "title" : "NBKPrimeSieve.Wheel",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkprimesieve\/wheel"
},
"doc://Numberick/documentation/Numberick/NBKPrimeSieve/description": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "description"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/description",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "description",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkprimesieve\/description"
},
"doc://Numberick/documentation/Numberick/NBKPrimeSieve/elements": {
  "abstract" : [
    {
      "text" : "A list of all primes from zero through ",
      "type" : "text"
    },
    {
      "code" : "limit",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "elements"
    },
    {
      "kind" : "text",
      "text" : ": ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Su",
      "text" : "UInt"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/elements",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "elements",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkprimesieve\/elements"
},
"doc://Numberick/documentation/Numberick/NBKPrimeSieve/increment()": {
  "abstract" : [
    {
      "text" : "Sieves the next page of numbers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "increment"
    },
    {
      "kind" : "text",
      "text" : "()"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/increment()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "increment()",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkprimesieve\/increment()"
},
"doc://Numberick/documentation/Numberick/NBKPrimeSieve/init(cache:wheel:culls:capacity:)": {
  "abstract" : [
    {
      "text" : "Creates a new instance and sieves the first page.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "cache"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10NBKCoreKit13NBKPrimeSieveC",
      "text" : "NBKPrimeSieve"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10NBKCoreKit13NBKPrimeSieveC5CacheV",
      "text" : "Cache"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "wheel"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10NBKCoreKit13NBKPrimeSieveC",
      "text" : "NBKPrimeSieve"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10NBKCoreKit13NBKPrimeSieveC5WheelV",
      "text" : "Wheel"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "culls"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10NBKCoreKit13NBKPrimeSieveC",
      "text" : "NBKPrimeSieve"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10NBKCoreKit13NBKPrimeSieveC5CullsV",
      "text" : "Culls"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "capacity"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Si",
      "text" : "Int"
    },
    {
      "kind" : "text",
      "text" : "?)"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/init(cache:wheel:culls:capacity:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(cache:wheel:culls:capacity:)",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkprimesieve\/init(cache:wheel:culls:capacity:)"
},
"doc://Numberick/documentation/Numberick/NBKPrimeSieve/limit": {
  "abstract" : [
    {
      "text" : "The highest value checked for primality.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "limit"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Su",
      "text" : "UInt"
    }
  ],
  "identifier" : "doc:\/\/Numberick\/documentation\/Numberick\/NBKPrimeSieve\/limit",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "limit",
  "type" : "topic",
  "url" : "\/documentation\/numberick\/nbkprimesieve\/limit"
},
"doc://Numberick/s23CustomStringConvertibleP": {
  "identifier" : "doc:\/\/Numberick\/s23CustomStringConvertibleP",
  "title" : "Swift.CustomStringConvertible",
  "type" : "unresolvable"
}
}
}